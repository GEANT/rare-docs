{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RARE home","text":""},{"location":"#overview","title":"Overview","text":"<p>RARE (Router for Academia, Research &amp; Education) is an ongoing effort under the G\u00c9ANT 5th programme which focus on creating an Open Source routing software platform. The project aims to integrate different pieces of software related to building blocks inherent to a routing stack:</p>"},{"location":"#control-plane","title":"Control plane:","text":"<ul> <li>RARE uses FreeRtr under the hood used as the control plane component</li> </ul>"},{"location":"#programmable-dataplane","title":"Programmable dataplane","text":"<ul> <li>P4, DPDK, XDP or TCPDUMP/libpcap are possible candidates</li> </ul>"},{"location":"#communication-interface","title":"Communication interface","text":"<ul> <li>This is the interface between the control plane and data plane and it is specific to the target dataplane. For example, BMv2, the open source P4 virtual switch developed by p4.org, uses P4Runtime in order to expose internal P4 program's object to an external control plane</li> </ul> <p>P4 and NPL are such languages that allows data plane programmability.</p> <p>Note</p> <p>P4 and NPL languages attempt to be as much as possible independent from the target or Programmable Ethernet ASIC architecture. However architecture dependance is still prominent. Code adjustments followed by a target specific compilation is necessary if you want to run your dataplane program on a specific architecture.</p>"},{"location":"#how-to-use-this-site","title":"How to use this site","text":"<p>You'll find in this page various guides that will help you deploy and use RARE routing platform.</p> <p>There are 3 categories of documentation:  </p>"},{"location":"#reference-guides","title":"Reference guides","text":"<p>This section will guide you in configuring freeRtr control plane. In essence, it is similar to freeRtr test cases. While the freeRtr test cases is convenient as it provides an extensive list of all the features in one page, this section will provide a navigation structure that helps you to find your way among the incredible freeRtr feature and interoperability list. </p>"},{"location":"#installation-guides","title":"Installation guides","text":"<p>RARE platform has the particularity to be able to run on top of different dataplanes.   </p> <ul> <li>If you want to deploy a BGP Route Reflector, no need to run RARE &amp; freeRtr with a P4 or DPDK dataplane. You can just use freeRtr native software dataplane</li> <li>At the opposite, if you wish to implement router with 6.4 Tbps capability, your best bet is to run RARE &amp; freeRtr with an INTEL/TOFINO P4 dataplane.</li> <li>RARE with DPDK or P4Emu dataplane is a perfect fit use case such as SOHO router requiring lower switching capability. (nx1GE,nx10GE or a couple of 100GE) </li> </ul>"},{"location":"#cookbooks","title":"Cookbooks","text":"<p>This section corresponds to cookbooks that will guide you in learning how to configure RARE for distinct use cases.</p>"},{"location":"about/","title":"About","text":"<p>RARE is a G\u00c9ANT project from the G\u00c9ANT-5 programme (GN5-1)</p>"},{"location":"about/#useful-links","title":"Useful links","text":"<ul> <li>RARE project page</li> <li>A team's member journey with RARE &amp; freeRtr</li> <li>freeRtr open source control plane</li> </ul>"},{"location":"about/#project-members","title":"Project members","text":""},{"location":"conduct/","title":"CODE OF CONDUCT","text":"<p>RARE is a Research &amp; Education project running under G\u00c9ANT-5 project umbrella.  </p> <p>It is part of netdev Work Package 6 (Network Development) activities.  </p> <p>As such, it uses G\u00c9ANT-5 Community Code of Conduct that strives to provide a positive and collaborative experience for all partiparticipants.  </p>"},{"location":"contacts/","title":"Contact us !","text":""},{"location":"contacts/#rare-mailing-list","title":"RARE mailing list","text":"<ul> <li>rare-users@lists.geant.org: Discussion related RARE usage</li> <li>rare-dev@lists.geant.org: Discussion related to RARE developers</li> </ul>"},{"location":"contacts/#freertr-mailing-list","title":"freeRtr mailing list","text":"<ul> <li>freertr@groups.io: If you have questions specific to freeRtr opensource control plane</li> </ul>"},{"location":"contacts/#rarefreertr-twitter","title":"RARE/freeRtr twitter","text":"<ul> <li>RARE/freeRtr twitter: Follow us on Twitter ! This is where we are publishing news about RARE project (Blog article, new feature implementation, breakthrough ... and more ! )</li> </ul>"},{"location":"license/","title":"License","text":"<p>Copyright(2019) G\u00c9ANT RARE project</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at:  </p> <p>http://www.apache.org/licenses/LICENSE-2.0 </p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"bower_components/next-bower/","title":"NeXt UI Framework","text":"<p>NeXt UI toolkit is an HTML5/JavaScript based toolkit for network web application. It provides a network centric topology UI component featuring high performance and rich functionality. NeXt can display large complex network topologies, aggregated network nodes, traffic/path/tunnel/group visualizations and it includes different layout algorithms, map overlays, and preset user friendly interactions. NeXt can work together with DLUX to build ODL apps.</p> <p>Homepage : https://wiki.opendaylight.org/view/NeXt:Main</p> <p>UI Toolkit Quicklook : https://www.youtube.com/watch?v=gBsUDu8aucs</p> <p>Current version : 1.0.0</p>"},{"location":"bower_components/next-bower/#key-features","title":"Key Features","text":"<ul> <li>Large complex network topologies</li> <li>Aggregated network nodes</li> <li>Traffic/path/tunnel/group visualizations</li> <li>Different layout algorithms</li> <li>Map overlays</li> <li>Preset user-friendly interactions</li> </ul>"},{"location":"bower_components/next-bower/#file-structure","title":"File structure","text":"<pre><code>next/\n  |- css/\n  |  |- next.css // next stylesheet file\n  |  |- next.min.css // minimized stylesheet file\n  |  |- next-componentized.css\n  |  |- next-componentized.min.css\n  |- js\n  |  |- next.js // next js library\n  |  |- next.min.js // minimized js library\n  |- fonts/ // font resources foler\n  |  doc/ //APi manual\n  |- README.md\n</code></pre>"},{"location":"bower_components/next-bower/#quick-start","title":"Quick start","text":"<p>1) Create a HTML file.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"css/next.css\"&gt;\n        &lt;script src=\"js/next.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n//next code\n&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>2) Edit next code</p> <pre><code>// Initialize a topology component\nvar topo = new nx.graphic.Topology({\n});\n\n// Create new app\nvar app = new nx.ui.Application();\n\n// Attach topo to app\ntopo.attach(app);\n</code></pre> <p>3) Open html file with Chrome</p>"},{"location":"bower_components/next-bower/#tutorials-and-sample-code","title":"Tutorials and Sample code","text":"<p>Tutorials : https://wiki.opendaylight.org/view/NeXt:Main</p> <p>Opendaylight sample code intergrate DLUX with NeXt: https://github.com/CiscoDevNet/opendaylight-sample-apps</p> <p>BIERMAN : https://github.com/zverevalexei/bierman-gui</p>"},{"location":"bower_components/next-bower/#build-instructions-from-source-code","title":"Build instructions from source code","text":"<p>Git :  https://git.opendaylight.org/gerrit/p/next</p>"},{"location":"bower_components/next-bower/#environment-requirements","title":"Environment requirements","text":"<p>In order to build NeXt from sources, you must have Node.js installed. </p> <p>After that, make sure to have Grunt installed. To do so, run:</p> <pre><code>npm install grunt\n</code></pre>"},{"location":"bower_components/next-bower/#build-process","title":"Build process","text":"<ul> <li><code>npm install</code> to install npm modules</li> <li><code>grunt</code> to build from sources</li> </ul>"},{"location":"bower_components/next-bower/#authorized-devs-only-bower-updates","title":"Authorized Devs Only: Bower Updates","text":"<p>You should only update Bower if the build is stable, or a major issue has been fixed.</p> <p>To do so, type in the command line:</p> <p><pre><code>node update-bower.js -u {{GITHUB USERNAME}} -p {{GITHUB PASSWORD}} -v {{VERSION NUMBER}}\n</code></pre> Make sure to turn <code>{{GITHUB USERNAME}}</code>, <code>{{GITHUB PASSWORD}}</code> and <code>{{NEW VERSION}}</code> into appropriate values.</p> <p>Example: </p> <pre><code>node update-bower.js -u gituser -p 123456 -v 0.1.0\n</code></pre> <p>Leave the terminal window open until you see <code>Done!</code> message.</p>"},{"location":"bower_components/next-bower/#whos-using-next","title":"Who's Using NeXt","text":"<p>Here we feature a few customers who choose NeXt framework as their topology visualization tool and use it in their products.</p> <ul> <li>Cisco</li> <li>Verizon</li> <li>AT&amp;T</li> <li>HP Enterprise</li> <li>NTS Netzwerk Telekom Service AG</li> </ul> <p>Are you next?</p>"},{"location":"bower_components/next-bower/#bugs","title":"Bugs","text":"<p>Open Bugs</p>"},{"location":"bower_components/next-bower/#team","title":"Team","text":"<ul> <li>Aikepaer Abuduweili (aaikepae@cisco.com)</li> <li>Kang Li (lkang2@cisco.com)</li> <li>Alexei Zverev (alzverev@cisco.com)</li> <li>Xu Yangyang(yangyxu@cisco.com)</li> </ul>"},{"location":"guides/getting-started/","title":"Getting started","text":""},{"location":"guides/getting-started/#hello-freertr","title":"Hello freeRtr !","text":""},{"location":"guides/getting-started/001-hello-world/","title":"Hello freeRtr !","text":""},{"location":"guides/getting-started/001-hello-world/#1-overview","title":"1 Overview","text":"<p>As freeRtr's author mentions: \"freeRouter is a free, open source router OS process, it speaks routing protocols, and (re)encapsulates packets on interfaces. it receives and sends packets through udp sockets\".</p> <p>Basically freeRtr is a control plane software that natively relies on UNIX UDP socket. Concretely, you can spawn an unlimited amount of router processes on the same host, and interconnect them via UNIX UDP sockets in order to implement a topology and simulate an entire network.</p> <p>This is freeRtr in its simplest form running in default mode.</p> <p>Note</p> <p>Please note that this installation is meant to demonstrate freeRtr UNIX socket forwarding capability. If you are considering switching high traffic rate such as 10G, it is advised to run freeRtr alongside a DPDK or P4 hardware dataplane.</p>"},{"location":"guides/getting-started/001-hello-world/#2-installation","title":"2 Installation","text":""},{"location":"guides/getting-started/001-hello-world/#21-operating-system","title":"2.1 Operating system","text":"<p>Any Operating System architecture (amd64, x86, arm etc.) supporting Java platform. In the example below we will use Debian \"buster\". <pre><code>lsb_release -a\nNo LSB modules are available.\nDistributor ID: Debian\nDescription:    Debian GNU/Linux 10 (buster)\nRelease:        10\nCodename:       buster\n</code></pre></p>"},{"location":"guides/getting-started/001-hello-world/#22-software-dependency","title":"2.2 Software dependency","text":"<p>freeRtr has been tested and working starting from Java 8. Of course it is recommended to use the latest and greatest Java runtime. <pre><code>sudo apt-get install --no-install-recommends --no-install-suggests --yes default-jre-headless\n</code></pre></p>"},{"location":"guides/getting-started/001-hello-world/#24-create-freertr-directory","title":"2.4 Create freeRtr directory","text":"<p>For simplicity's sake we will use <code>/rtr</code> folder. <pre><code>sudo mkdir /rtr\n</code></pre></p>"},{"location":"guides/getting-started/001-hello-world/#23-download-freertr-binary","title":"2.3 Download freeRtr binary","text":"<p>The freeRtr homepage is at <code>freertr.org</code>. Starting from this page, you'll find various resources such as source code (there is also a GitHub mirror), binaries, and other images that might be of your interest. From there we just download the freeRtr <code>jar</code> files. <pre><code>cd /rtr\nwget http://www.freertr.org/rtr.jar\n</code></pre></p>"},{"location":"guides/getting-started/001-hello-world/#3-configuration","title":"3 Configuration","text":"<p>freeRtr needs two files in order to run properly:</p> <ul> <li>A hardware definition file</li> <li>A software configuration file</li> </ul>"},{"location":"guides/getting-started/001-hello-world/#31-hardware-configuration-file","title":"3.1 Hardware configuration file","text":"<p>This file encompasses definition of the router:</p> <ul> <li>platform information</li> <li>interfaces definition</li> <li>external port translation to freeRtr port namespace</li> <li>external process launched and watched by freeRtr</li> <li>...</li> </ul> <p>Let's give it the name <code>$hostname-hw.txt</code> (It can be of course any name)</p> <ul> <li>The router we will create is <code>r1</code> so the hardware file is:<code>r1-hw.txt</code></li> <li>declare 2 interfaces for <code>r1</code>.</li> </ul> <p>The format of interface declaration is:</p> <p><pre><code>int &lt;intf_name&gt; &lt;intf_type&gt; &lt;intf_mac&gt; &lt;ip_socket_a&gt; &lt;port_socket_a&gt; &lt;ip_socket_b&gt; &lt;port_socket_b&gt;\n</code></pre> In its simplest form, <code>r1-hw.txt</code> is declaring 2 interfaces (<code>eth1</code>,<code>eth2</code>) of type <code>ethernet</code></p> <pre><code>int eth1 eth 0000.1111.0001 127.0.0.1 1001 127.0.0.1 2001\nint eth2 eth 0000.1111.0002 127.0.0.1 1002 127.0.0.1 3002\n</code></pre> <ul> <li><code>eth1</code> is identified by socket <code>127.0.0.1 1001</code> and remote end is <code>127.0.0.1 2001</code></li> <li><code>eth2</code> is identified by socket <code>127.0.0.1 1001</code> and remote end is <code>127.0.0.1 3002</code></li> </ul>"},{"location":"guides/getting-started/001-hello-world/#32-software-configuration-file","title":"3.2 Software configuration file","text":"<p>This is basically <code>r1</code> freeRtr configuration similar to Cisco IOS <code>startup-config</code> file. In the example below:</p> <ul> <li>you notice <code>eth1</code> and <code>eth2</code> that have been declared in the hardware file.</li> <li>These interface have <code>lldp</code> and an <code>ipv4</code> and <code>ipv6</code> addresses configured.</li> <li>In addition to that, we added a <code>lo0</code> that is of course not included in <code>r1-hw.txt</code> file as it is a logical interface.</li> <li>One peculiarity is that freeRtr enforces VRF usage. (in the example <code>vrf v1</code>) There is therefore no ambiguity related to the default VRF or VRF-aware features.</li> </ul> <p>Let's give it the name <code>$hostname-sw.txt</code> (It can be of course any name)</p> <pre><code>hostname r1\n!\nvrf def v1\n rd 1:1\n exit\nserver telnet tel\n security protocol tel\n vrf v1\n exit\nint lo0\n vrf for v1\n ipv4 addr 2.2.2.1 255.255.255.255\n ipv6 addr 4321::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n exit\nint eth1\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.1 255.255.255.252\n ipv6 addr 1234:1::1 ffff:ffff::\n exit\nint eth2\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.5 255.255.255.252\n ipv6 addr 1234:2::1 ffff:ffff::\n exit\n!\n</code></pre>"},{"location":"guides/getting-started/001-hello-world/#33-lets-run-our-first-freertr-process","title":"3.3 Let's run our first freeRtr process !","text":"<p>Let's first try to launch freeRtr without any parameters: <pre><code>java -jar /rtr/rtr.jar\njava -jar /rtr/rtr.jar &lt;parameters&gt;\nparameters:\n  router &lt;cfg&gt;            - start router background, config url\n  routerc &lt;cfg&gt;           - start router with console, config url\n  routerw &lt;cfg&gt;           - start router with window, config url\n  routercw &lt;cfg&gt;          - start router with console and window, config url\n  routers &lt;hwcfg&gt; &lt;swcfg&gt; - start router from separate configs, config url, config url\n  routera &lt;swcfg&gt;         - start router with sw config only, config url\n  test &lt;cmd&gt;              - execute test command, command to execute\n  show &lt;cmd&gt;              - execute show command, command to execute\n  exec &lt;cmd&gt;              - execute exec command, command to execute\n</code></pre> From the output above you observe some indications indicating how to launch freeRtr with various options. In our case we will then launch freeRtr with <code>r1-hw.txt</code> and <code>r1-sw.txt</code> and we also would like to have a CLI console access:</p> <p><pre><code>sudo java -jar rtr.jar routersc r1-hw.txt r1-sw.txt\n\n\n#######                         ##################\n ##  ##                                 ##\n ##   # ## ###   #####   #####  ## ###  ## ## ###\n ## #    ### ## ##   ## ##   ##  ### ## ##  ### ##\n ####    ##  ## ####### #######  ##  ## ##  ##  ##\n ## #    ##     ##      ##       ##     ##  ##\n ##      ##     ##   ## ##   ##  ##     ##  ##\n####     ##      #####   #####   ##     ##  ##\n\nfreeRouter v21.8.21-cur, done by cs@nop.\n\nplace on the web: http://www.freertr.org/\nlicense: http://creativecommons.org/licenses/by-sa/4.0/\nquote1: make the world better\nquote2: if a machine can learn the value of human life, maybe we can too\nquote3: be liberal in what you accept, and conservative in what you send\nquote4: the beer-ware license for selected group of people:\ncs@nop wrote these files. as long as you retain this notice you\ncan do whatever you want with this stuff. if we meet some day, and\nyou think this stuff is worth it, you can buy me a beer in return\n\ninfo cfg.cfgInit.doInit:cfgInit.java:660 booting\ninfo cfg.cfgInit.doInit:cfgInit.java:802 initializing hardware\ninfo cfg.cfgInit.doInit:cfgInit.java:808 applying defaults\ninfo cfg.cfgInit.doInit:cfgInit.java:815 applying configuration\ninfo cfg.cfgInit.doInit:cfgInit.java:845 boot completed\nwelcome\nline ready\nr1#\n</code></pre> <code>ri</code> running-configuration <pre><code>r1#sh run\nhostname r1\nbuggy\n!\n!\nvrf definition v1\n rd 1:1\n exit\n!\ninterface loopback0\n no description\n vrf forwarding v1\n ipv4 address 2.2.2.1 255.255.255.255\n ipv6 address 4321::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n no shutdown\n no log-link-change\n exit\n!\ninterface ethernet1\n description r1@eth1 -&gt; r2@eth1\n lldp enable\n vrf forwarding v1\n ipv4 address 1.1.1.1 255.255.255.252\n ipv6 address 1234:1::1 ffff:ffff::\n no shutdown\n  -=[more]=-\n no log-link-change\n exit\n!\ninterface ethernet2\n description r1@eth2 -&gt; r3@eth2\n lldp enable\n vrf forwarding v1\n ipv4 address 1.1.1.5 255.255.255.252\n ipv6 address 1234:2::1 ffff:ffff::\n no shutdown\n no log-link-change\n exit\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\nserver telnet tel\n security protocol telnet\n no exec authorization\n no login authentication\n vrf v1\n exit\n!\n!\nend\n\nr1#\n</code></pre> Congratulations! You have launched your first freeRtr router process using native UNIX UDP socket forwarding!</p> <p>!!!+ info      In the example above we spawned a freeRtr process with <code>sudo</code>, the reason for using it here is that freeRtr base directory is in <code>/rtr</code> and port below reserved port range. Other than that, freeRtr can be launched as a regular Unix user.</p>"},{"location":"guides/getting-started/001-hello-world/#4-conclusion","title":"4 Conclusion","text":"<p>This section demonstrated:</p> <ul> <li>How to install and configure freeRtr on any OS able to run JVM</li> <li> <p>How to create a freeRtr router process that has:</p> <ul> <li>two interfaces (<code>eth1</code> and <code>eth2</code>)</li> <li><code>eth1</code> is UDP sockets <code>127.0.0.1 1001</code>, remote end is <code>127.0.0.1 2001</code></li> <li><code>eth2</code> is UDP sockets <code>127.0.0.1 1002</code>, remote end is <code>127.0.0.1 3002</code></li> </ul> </li> <li> <p>How to start freeRtr</p> </li> </ul> <p>Note</p> <p>Most of you have probaly noticed that <code>r1</code> has both <code>eth1</code> and <code>eth2</code> interfaces connected to nowhere. And you are right ! We will see in the next \"getting started\" article how to implement a entire local topology by interconnecting through UDP sockets 4 freeRtr router processes.</p>"},{"location":"guides/getting-started/002-topology-example/","title":"freeRtr topology simulation","text":""},{"location":"guides/getting-started/002-topology-example/#1-overview","title":"1 Overview","text":"<p>In Hello freeRtr ! you learned how to implement one single freeRtr node that has 2 interfaces. In this page, you'll learn:</p> <ul> <li>how to implement a local topology by declaring 4 nodes</li> <li>each nodes has 2 interfaces (<code>eth1</code> and<code>eth2</code>)</li> <li>declare interconnection in the hardware definition file using the topology below.</li> </ul>"},{"location":"guides/getting-started/002-topology-example/#2-freertr-network-example","title":"2 freeRtr network example","text":"<p>In this section, we will use the demo example bundled into freeRtr tarball.</p>"},{"location":"guides/getting-started/002-topology-example/#21-diagram","title":"2.1 Diagram","text":"<p>The demo implements a square topology:</p> <ul> <li>nodes are <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code></li> <li> <p>edges are <code>e1[r1-r2]</code>,<code>e2[r2-r4]</code>,<code>e3[r3-r4]</code>,<code>e4[r1-r3]</code></p> <p><code>-</code> means is \"connected to\"</p> </li> </ul> <pre><code>  r1----e1----r2\n  |            |\n  |            |\n  e2          e2\n  |            |\n  |            |\n  r3----e1----r4\n</code></pre>"},{"location":"guides/getting-started/002-topology-example/#22-nodes-configuration","title":"2.2 Nodes configuration","text":""},{"location":"guides/getting-started/002-topology-example/#221-router-r1","title":"2.2.1  router <code>r1</code>","text":"<p><code>r1-hw.txt</code> <pre><code>int eth1 eth 0000.1111.0001 127.0.0.1 1001 127.0.0.1 2001\nint eth2 eth 0000.1111.0002 127.0.0.1 1002 127.0.0.1 3002\n</code></pre> <code>r1-sw.txt</code></p> <pre><code>hostname r1\n!\nvrf def v1\n rd 1:1\n exit\nserver telnet tel\n security protocol tel\n vrf v1\n exit\nint lo0\n vrf for v1\n ipv4 addr 2.2.2.1 255.255.255.255\n ipv6 addr 4321::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n exit\nint eth1\n desc r1@eth1 -&gt; r2@eth1\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.1 255.255.255.252\n ipv6 addr 1234:1::1 ffff:ffff::\n exit\nint eth2\n desc r1@eth2 -&gt; r3@eth2\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.5 255.255.255.252\n ipv6 addr 1234:2::1 ffff:ffff::\n exit\n!\n</code></pre>"},{"location":"guides/getting-started/002-topology-example/#222-router-r2","title":"2.2.2  router <code>r2</code>","text":"<p><code>r2-hw.txt</code> <pre><code>int eth1 eth 0000.2222.0001 127.0.0.1 2001 127.0.0.1 1001\nint eth2 eth 0000.2222.0002 127.0.0.1 2002 127.0.0.1 4002\n</code></pre> <code>r2-sw.txt</code></p> <pre><code>hostname r2\n!\nvrf def v1\n rd 1:1\n exit\nserver telnet tel\n security protocol tel\n vrf v1\n exit\nint lo0\n vrf for v1\n ipv4 addr 2.2.2.2 255.255.255.255\n ipv6 addr 4321::2 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n exit\nint eth1\n desc r2@eth1 -&gt; r1@eth1\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.2 255.255.255.252\n ipv6 addr 1234:1::2 ffff:ffff::\n exit\nint eth2\n desc r2@eth2 -&gt; r4@eth2\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.9 255.255.255.252\n ipv6 addr 1234:3::1 ffff:ffff::\n exit\n!\n</code></pre>"},{"location":"guides/getting-started/002-topology-example/#223-router-r3","title":"2.2.3  router <code>r3</code>","text":"<p><code>r3-hw.txt</code> <pre><code>int eth1 eth 0000.3333.0001 127.0.0.1 3001 127.0.0.1 4001\nint eth2 eth 0000.3333.0002 127.0.0.1 3002 127.0.0.1 1002\n</code></pre> <code>r3-sw.txt</code> <pre><code>hostname r3\n!\nvrf def v1\n rd 1:1\n exit\nserver telnet tel\n security protocol tel\n vrf v1\n exit\nint lo0\n vrf for v1\n ipv4 addr 2.2.2.3 255.255.255.255\n ipv6 addr 4321::3 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n exit\nint eth1\n desc r3@eth1 -&gt; r4@eth1\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.13 255.255.255.252\n ipv6 addr 1234:4::1 ffff:ffff::\n exit\nint eth2\n desc r3@eth2 -&gt; r1@eth2\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.6 255.255.255.252\n ipv6 addr 1234:2::2 ffff:ffff::\n exit\n!\n</code></pre></p>"},{"location":"guides/getting-started/002-topology-example/#224-router-r4","title":"2.2.4  router <code>r4</code>","text":"<p><code>r4-hw.txt</code> <pre><code>int eth1 eth 0000.4444.0001 127.0.0.1 4001 127.0.0.1 3001\nint eth2 eth 0000.4444.0002 127.0.0.1 4002 127.0.0.1 2002\n</code></pre> <code>r4-sw.txt</code> <pre><code>hostname r4\n!\nvrf def v1\n rd 1:1\n exit\nserver telnet tel\n security protocol tel\n vrf v1\n exit\nint lo0\n vrf for v1\n ipv4 addr 2.2.2.4 255.255.255.255\n ipv6 addr 4321::4 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n exit\nint eth1\n desc r4@eth1 -&gt; r3@eth1\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.14 255.255.255.252\n ipv6 addr 1234:4::2 ffff:ffff::\n exit\nint eth2\n desc r4@eth2 -&gt; r2@eth2\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.10 255.255.255.252\n ipv6 addr 1234:3::2 ffff:ffff::\n exit\n!\n</code></pre></p>"},{"location":"guides/getting-started/002-topology-example/#3-explanation","title":"3 Explanation","text":""},{"location":"guides/getting-started/002-topology-example/#31-router-r1","title":"3.1  router <code>r1</code>","text":"<p><code>r1</code> has 2 interfaces:</p> <ul> <li><code>r1@eth1</code> has socket <code>127.0.0.1 1001</code> and is conected to <code>127.0.0.1 2001</code></li> <li><code>r1@eth2</code> has socket <code>127.0.0.1 1002</code> and is conected to <code>127.0.0.1 3002</code></li> </ul> <p>if you look at subsequent declarations below:</p> <ul> <li><code>127.0.0.1 2001</code> is <code>r2@eth1</code></li> <li><code>127.0.0.1 3002</code> is <code>r3@eth2</code></li> </ul>"},{"location":"guides/getting-started/002-topology-example/#32-router-r2","title":"3.2  router <code>r2</code>","text":"<ul> <li><code>r2@eth1</code> has socket <code>127.0.0.1 2001</code> and is conected to <code>127.0.0.1 1001</code></li> <li><code>r2@eth2</code> has socket <code>127.0.0.1 2002</code> and is conected to <code>127.0.0.1 4002</code></li> </ul> <p>if you look at subsequent declarations below:</p> <ul> <li><code>127.0.0.1 1001</code> is <code>r1@eth1</code></li> <li><code>127.0.0.1 4002</code> is <code>r4@eth2</code></li> </ul>"},{"location":"guides/getting-started/002-topology-example/#33-router-r3","title":"3.3  router <code>r3</code>","text":"<ul> <li><code>r3@eth1</code> has socket <code>127.0.0.1 3001</code> and is conected to <code>127.0.0.1 4001</code></li> <li><code>r3@eth2</code> has socket <code>127.0.0.1 3002</code> and is conected to <code>127.0.0.1 1002</code></li> </ul> <p>if you look at subsequent declarations below:</p> <ul> <li><code>127.0.0.1 4001</code> is <code>r4@eth1</code></li> <li><code>127.0.0.1 1002</code> is <code>r1@eth2</code></li> </ul>"},{"location":"guides/getting-started/002-topology-example/#34-router-r4","title":"3.4  router <code>r4</code>","text":""},{"location":"guides/getting-started/002-topology-example/#4-verification","title":"4 Verification","text":""},{"location":"guides/getting-started/002-topology-example/#41-launch-all-nodes","title":"4.1 Launch all nodes","text":"<p>Run <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code> in different terminal windows:</p> <p><code>r1</code> <pre><code>java -jar rtr.jar routersc r1-hw.txt r1-sw.txt\n</code></pre> <code>r2</code> <pre><code>java -jar rtr.jar routersc r2-hw.txt r2-sw.txt\n</code></pre> <code>r3</code> <pre><code>java -jar rtr.jar routersc r3-hw.txt r3-sw.txt\n</code></pre> <code>r4</code> <pre><code>java -jar rtr.jar routersc r4-hw.txt r4-sw.txt\n</code></pre></p>"},{"location":"guides/getting-started/002-topology-example/#42-physical-connectivity-check","title":"4.2 Physical connectivity check","text":""},{"location":"guides/getting-started/002-topology-example/#421-router-r1","title":"4.2.1  router <code>r1</code>","text":"<p><pre><code>r1#sh lldp nei\ninterface  hostname  iface      ipv4     ipv6\nethernet1  r2        ethernet1  1.1.1.2  1234:1::2\nethernet2  r3        ethernet2  1.1.1.6  1234:2::2\n</code></pre> ping from <code>r1@eth1</code> <pre><code>r1#ping 1.1.1.2 vrf v1\npinging 1.1.1.2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=1/2/5/12\n\nr1#ping 1234:1::2 vrf v1\npinging 1234:1::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/3/16\n</code></pre> ping from <code>r1@eth2</code></p> <pre><code>r1#ping 1.1.1.6 vrf v1\npinging 1.1.1.6, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/2/10\n\nr1#ping 1234:2::2 vrf v1\npinging 1234:2::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/4/16\nr1#\n</code></pre>"},{"location":"guides/getting-started/002-topology-example/#422-router-r2","title":"4.2.2  router <code>r2</code>","text":"<p><pre><code>r2#sh lldp nei\ninterface  hostname  iface      ipv4      ipv6\nethernet1  r1        ethernet1  1.1.1.1   1234:1::1\nethernet2  r4        ethernet2  1.1.1.10  1234:3::2\n</code></pre> ping from <code>r2@eth1</code> <pre><code>r2#ping 1.1.1.1 vrf v1\npinging 1.1.1.1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/3/8\n\nr2#ping 1234:1::1 vrf v1\npinging 1234:1::1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/8/22\n</code></pre> ping from <code>r2@eth2</code> <pre><code>r2#ping 1.1.1.10 vrf v1\npinging 1.1.1.10, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/3/6\n\nr2#ping 1234:3::2 vrf v1\npinging 1234:3::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/2/4/14\nr2#\n</code></pre></p>"},{"location":"guides/getting-started/002-topology-example/#423-router-r3","title":"4.2.3  router <code>r3</code>","text":"<p><pre><code>r3#sh lldp nei\ninterface  hostname  iface      ipv4      ipv6\nethernet1  r4        ethernet1  1.1.1.14  1234:4::2\nethernet2  r1        ethernet2  1.1.1.5   1234:2::1\n</code></pre> ping from <code>r3@eth1</code> <pre><code>r3#ping 1.1.1.14 vrf v1\npinging 1.1.1.14, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/5/10\nr3#ping 1234:4::2 vrf v1\nr3#ping 1234:4::2 vrf v1\npinging 1234:4::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/9\n</code></pre> ping from <code>r3@eth2</code> <pre><code>r3#ping 1.1.1.5 vrf v1\nr3#ping 1.1.1.5 vrf v1\npinging 1.1.1.5, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/2/9/15\nr3#ping 1234:2::1 vrf v1\nr3#ping 1234:2::1 vrf v1\npinging 1234:2::1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/4/12\nr3#\n</code></pre></p>"},{"location":"guides/getting-started/002-topology-example/#424-router-r4","title":"4.2.4  router <code>r4</code>","text":"<p><pre><code>r4#sh lldp nei\ninterface  hostname  iface      ipv4      ipv6\nethernet1  r3        ethernet1  1.1.1.13  1234:4::1\nethernet2  r2        ethernet2  1.1.1.9   1234:3::1\n</code></pre> ping from <code>r4@eth1</code></p> <p><pre><code>r4#ping 1.1.1.13 vrf v1\npinging 1.1.1.13, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/17\n\nr4#ping 1234:4::1 vrf v1\npinging 1234:4::1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/4/17\n</code></pre> ping from <code>r4@eth2</code></p> <pre><code>r4#ping 1.1.1.9 vrf v1\npinging 1.1.1.9, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/5\n\nr4#ping 1234:3::1 vrf v1\npinging 1234:3::1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/3/12\nr4#\n</code></pre>"},{"location":"guides/getting-started/002-topology-example/#4-conclusion","title":"4 Conclusion","text":"<p>This section demonstrated:</p> <ul> <li>How to implement a local square topology:<ul> <li>by defining UNIX Socket pair</li> <li>and lauching multiple freeRtr processes on the same host</li> </ul> </li> <li>How to verify connectivity from each node of the topology</li> <li>This article demonstrated how freeRtr leverage UNIX UDP socket in order to forward packet</li> </ul> <p>freeRtr in pure UNIX UDP socket mode is extremely useful when you want to simulate various topologies. In our example, <code>127.0.0.1</code> (localhost) was used, but of course any IP could have been used as long as the host somehow can reach the other IPs. With this mechanism, one can simulate an entire real service provider network. The only limitation is the inherent availability of hardware server resources such as CPU and RAM.</p> <p>Note</p> <p>One can says: \"Simulation is great ! But what about effectively switch traffic IRL ?\" And this is a fair comment ! In the next article we will see how to bind one freeRtr interface socket to a Linux network interface and start interacting with others hosts in the Local Area network. So stay tuned !</p>"},{"location":"guides/getting-started/003-unleash/","title":"Unleash freeRtr to outside network !","text":""},{"location":"guides/getting-started/003-unleash/#1-overview","title":"1 Overview","text":"<p>In Hello freeRtr ! and Topology example we learned how to install freeRtr and create a 4 nodes topology. This is perfect in a network simulation use case, but this is basically useless as nodes are operating in an isolated environment.</p> <p>In this article, we will learn how to bind freeRtr interfaces to existing Linux network host interfaces. freeRtr itself will become officially part of the existing network and will be able to communicate with any host in the local area network !</p>"},{"location":"guides/getting-started/003-unleash/#2-installation","title":"2 Installation","text":""},{"location":"guides/getting-started/003-unleash/#21-pre-requisites","title":"2.1 Pre-requisites","text":"<p>In order to illustrate this binding operation, I've added one new interfaces to my VirtualBox Debian guest OS.</p> <pre><code>ip a\n...\n4: enp0s9: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 08:00:27:25:43:31 brd ff:ff:ff:ff:ff:ff\n...\n</code></pre> <p>As this interface is totally controlled by freeRtr we need to reset it:</p> <pre><code>ip addr flush dev enp0s9\n</code></pre> <p>In order to avoid future problem (disable TCP-offload)</p> <p><pre><code>cat &lt;&lt;EOF | sudo tee /root/tcp-offload-off.sh\n\n#! /bin/bash\n\n/sbin/ethtool -K $1 rx off\n/sbin/ethtool -K $1 tx off\n/sbin/ethtool -K $1 sg off\n/sbin/ethtool -K $1 tso off\n/sbin/ethtool -K $1 ufo off\n/sbin/ethtool -K $1 gso off\n/sbin/ethtool -K $1 gro off\n/sbin/ethtool -K $1 lro off\n/sbin/ethtool -K $1 rxvlan off\n/sbin/ethtool -K $1 txvlan off\n/sbin/ethtool -K $1 ntuple off\n/sbin/ethtool -K $1 rxhash off\n\nEOF\n</code></pre> <pre><code>sudo chmod u+x /root/tcp-offload-off.sh\n</code></pre> <pre><code>sudo /root/tcp-offload-off.sh enp0s9\n</code></pre></p> <p>Enable promiscuous mode and set MTU to 8192 as freeRtr is able to handle jumbo frames</p> <p><pre><code>ip link set enp9s9 up promisc on mtu 8192\n</code></pre> Enable <code>enp0s9</code></p> <pre><code>ip link set enp0s9 up\n</code></pre> <p>IPv6 will be handled by freeRtr, therefore we disable IPv6 from Linux perspective <pre><code>echo 1 &gt; /proc/sys/net/ipv6/conf/enp0s9/disable_ipv6\n</code></pre></p>"},{"location":"guides/getting-started/003-unleash/#22-additional-freertr-softwares","title":"2.2 Additional freeRtr softwares","text":"<p>Let's add an additional interface definition <code>eth3</code></p> <ul> <li><code>eth3</code>, A-end:<code>127.0.0.1 1003</code> ---- B-end:<code>127.0.0.1 5003</code></li> </ul> <p>In this example B-end will be stitched to an existing Linux interface. <code>r1@eth3</code> which has socket <code>127.0.0.1 1003</code> will be bind to <code>enp0s9</code> Linux interface. In order to accomplish this,  we will use a simple tool called <code>pcapInt</code> part of freeRtr bundles</p> <p>Let's first install freeRtr addtional tools bundle.</p> <p><pre><code>cd /rtr\nwget freertr.org/rtr-x86_64.tar\ntar xf rtr-x86_64.tar -C /rtr/\n</code></pre> These tools are basically tools used to ensure freeRtr packet forwarding in different context and dataplane.</p> <pre><code>ls -1 *.bin\nbundle.bin\nhdlcInt.bin\nmapInt.bin\nmodem.bin\np4dpdk.bin\np4emu.bin\np4pkt.bin\npcap2pcap.bin\npcapInt.bin\nrawInt.bin\nsender.bin\nstdLin.bin\ntapInt.bin\nttyLin.bin\nvlan.bin\n</code></pre>"},{"location":"guides/getting-started/003-unleash/#3-configuration","title":"3 Configuration","text":""},{"location":"guides/getting-started/003-unleash/#31-freertr-hardware-file","title":"3.1 freeRtr \"hardware\" file","text":"<p>We will re-use <code>r1</code> hardware definition file from previous articles and add <code>eth3</code></p> <pre><code>int eth3 eth 0000.1111.0003 127.0.0.1 1003 127.0.0.1 5003\n</code></pre> <ul> <li><code>eth3</code> is identified by socket <code>127.0.0.1 1003</code> and remote end is <code>127.0.0.1 5003</code></li> </ul> <p>For learning sake, we will add a new keywords:</p> <pre><code>hwid MyDebianVM\ntcp2vrf 2321 v1 23\n</code></pre> <ul> <li><code>hwid</code> is the hardware identifier shown usign the <code>show platform</code> command.</li> <li><code>tcp2vrf</code> declare:</li> <li>a Linux host high port <code>2321</code></li> <li>that is translated to port <code>23</code></li> <li>into freeRtr VRF <code>v1</code> namespace</li> </ul> Info <p>We will see the effect of these new keywords in the verification section.</p>"},{"location":"guides/getting-started/003-unleash/#32-freertr-configuration-file","title":"3.2 freeRtr \"configuration\" file","text":"<pre><code>hostname r1\n!\nvrf def v1\n rd 1:1\n exit\nprefix-list p4\n sequence 10 permit 0.0.0.0/0 ge 0 le 0\n exit\nprefix-list p6\n sequence 10 permit ::/0 ge 0 le 0\n exit\nint eth1\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.1 255.255.255.252\n ipv6 addr 1234:1::1 ffff:ffff::\n exit\nint eth2\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.5 255.255.255.252\n ipv6 addr 1234:2::1 ffff:ffff::\n exit\nint eth3\n description r1@eth3[127.0.0.1 1003]-&gt;enp0s9[127.0.0.1 5003]\n lldp ena\n vrf for v1\n ipv4 address dynamic 255.255.255.0\n ipv4 gateway-prefix p4\n ipv4 dhcp-client enable\n ipv4 dhcp-client early\n ipv6 address dynamic ffff:ffff:ffff:ffff::\n ipv6 gateway-prefix p6\n ipv6 slaac\n no shutdown\n no log-link-change\n exit\n!\n</code></pre> <ul> <li>We are adding a telnet server configuration for OOBM from the Linux host VM:</li> <li>port is <code>23</code></li> <li>vrf <code>v1</code></li> <li><code>logging</code> will be applied</li> <li><code>exec logging</code> is logging all command executed from freeRtr cli prompt</li> <li> <p><code>login logging</code> is logging all user access freeRtr cli</p> </li> <li> <p><code>logging</code> feature is also configured</p> </li> <li><code>logging buffered</code> is the memory buffer in lines</li> <li><code>logging file</code> is the log file in Linux filesytem</li> <li><code>logging rotate</code> declare a rotation of the log file when the log reach <code>X</code> size in bytes</li> </ul> <pre><code>!\nlogging buffered debug 10240\nlogging file debug /var/log/freertr.log\nlogging rotate 655360000 /var/log/freertr.old\n!\nserver telnet v1\n security protocol telnet\n exec logging\n login logging\n vrf v1\n exit\n!\n</code></pre> Info <p>We will to check these new features in the verification section.</p>"},{"location":"guides/getting-started/003-unleash/#33-lets-unleash-freertr-to-the-outside-network","title":"3.3 Let's unleash freeRtr to the outside network !","text":"<p>Let's launch first <code>r1</code> <pre><code>java -jar rtr.jar routersc r1-hw.txt r1-sw.txt\n\n\n#######                         ##################\n ##  ##                                 ##\n ##   # ## ###   #####   #####  ## ###  ## ## ###\n ## #    ### ## ##   ## ##   ##  ### ## ##  ### ##\n ####    ##  ## ####### #######  ##  ## ##  ##  ##\n ## #    ##     ##      ##       ##     ##  ##\n ##      ##     ##   ## ##   ##  ##     ##  ##\n####     ##      #####   #####   ##     ##  ##\n\nfreeRouter v21.8.21-cur, done by cs@nop.\n\nplace on the web: http://www.freertr.org/\nlicense: http://creativecommons.org/licenses/by-sa/4.0/\nquote1: make the world better\nquote2: if a machine can learn the value of human life, maybe we can too\nquote3: be liberal in what you accept, and conservative in what you send\nquote4: the beer-ware license for selected group of people:\ncs@nop wrote these files. as long as you retain this notice you\ncan do whatever you want with this stuff. if we meet some day, and\nyou think this stuff is worth it, you can buy me a beer in return\n\ninfo cfg.cfgInit.doInit:cfgInit.java:660 booting\ninfo cfg.cfgInit.doInit:cfgInit.java:802 initializing hardware\ninfo cfg.cfgInit.doInit:cfgInit.java:808 applying defaults\ninfo cfg.cfgInit.doInit:cfgInit.java:815 applying configuration\ninfo cfg.cfgInit.doInit:cfgInit.java:845 boot completed\nwelcome\nline ready\nr1#\n</code></pre> <code>r1</code> running-configuration <pre><code>r1#sh run\nhostname r1\nbuggy\n!\n!\nvrf definition v1\n rd 1:1\n exit\n!\nint eth1\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.1 255.255.255.252\n ipv6 addr 1234:1::1 ffff:ffff::\n exit\nint eth2\n lldp ena\n vrf for v1\n ipv4 addr 1.1.1.5 255.255.255.252\n ipv6 addr 1234:2::1 ffff:ffff::\n exit\ninterface ethernet3\n description r1@eth3[127.0.0.1 1003]-&gt;enp0s9[127.0.0.1 5003]\n lldp enable\n vrf forwarding v1\n ipv4 address dynamic 255.255.255.0\n ipv4 gateway-prefix p4\n ipv4 dhcp-client enable\n ipv4 dhcp-client early\n ipv6 address dynamic ffff:ffff:ffff:ffff::\n ipv6 gateway-prefix p6\n ipv6 slaac\n no shutdown\n no log-link-change\n exit\n!\n...\n!\nserver telnet tel\n security protocol telnet\n no exec authorization\n no login authentication\n vrf v1\n exit\n!\n!\nend\n\nr1#\n</code></pre></p> <p>Now, it is time to bind  <code>r1@eth3</code> to <code>epn0s9</code>. First let's run <code>pcapInt</code> without any parameter.</p> <pre><code>./pcapInt.bin\nusing: ./pcapInt.bin &lt;iface&gt; &lt;lport&gt; &lt;raddr&gt; &lt;rport&gt; [laddr]\n   or: ./pcapInt.bin &lt;command&gt;\ncommands: l=list interfaces\n          v=version\n          h=this help\n</code></pre> <p>Now, let's use <code>pcapInt</code> in order to bind <code>r1@eth1</code> to <code>epn0s9</code>.</p> <ul> <li><code>r1@eth3</code> socket to <code>enp0s9</code> using socket <code>127.0.0.1 5003</code></li> </ul> <pre><code>./pcapInt.bin enp0s9 5003 127.0.0.1 1003 127.0.0.1\nbinded to local port 127.0.0.1 5003.\nwill send to 127.0.0.1 1003.\npcap version: libpcap version 1.10.0 (with TPACKET_V3)\nopening interface enp0s9\nserving others\n&gt; d\niface counters:\n                      packets                bytes\nreceived                   24                 6104\nsent                        0                    0\n\n&gt; h\ncommands:\nh - this help\nq - exit process\nd - display counters\nc - clear counters\n\n&gt; \n</code></pre>"},{"location":"guides/getting-started/003-unleash/#4-verification","title":"4 Verification","text":"<p>Port translation verification via tcp2vrf<code>2321</code> -&gt; <code>23</code></p> <p><pre><code>telnet 127.0.0.1 2321\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nwelcome\nline ready\nr1#\n</code></pre> Hardware information verification</p> <p><pre><code>r1#show platform\nfreeRouter v21.8.21-cur, done by cs@nop.\n\nname: r1\nhwid: MyDebianVM\nuptime: since 2021-08-27 16:13:28, for 00:09:59\nreload: -\nhwcfg: r1-hw.txt\nswcfg: r1-sw.txt\ncpu: 1*amd64\nmem: free=6452k, max=502m, used=32m\nhost: Linux v5.10.0-8-amd64\njava: Debian v11.0.12 @ /usr/lib/jvm/java-11-openjdk-amd64\njspec: Oracle Corporation (Java Platform API Specification) v11\nvm: Debian (OpenJDK 64-Bit Server VM) v11.0.12+7-post-Debian-2\nvmspec: Oracle Corporation (Java Virtual Machine Specification) v11\nclass: v55.0 @ rtr.jar\n\nr1#\n</code></pre> <code>eth1</code> DHCP client verification</p> <pre><code>show ipv4 int                                                                                                               \ninterface  state  address         netmask\nloopback0  up     2.2.2.1         255.255.255.255\nethernet1  up     1.1.1.1         255.255.255.252\nethernet2  up     1.1.1.5         255.255.255.252\nethernet3  up     192.168.136.67  255.255.255.0\n\nr1#show ipv6 int                                                                                                               \ninterface  state  address                            netmask\nloopback0  up     4321::1                            ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\nethernet1  up     1234:1::1                          ffff:ffff::\nethernet2  up     1234:2::1                          ffff:ffff::\nethernet3  up     2a01:e0a:159:2856:200:11ff:fe11:3  ffff:ffff:ffff:ffff::\n\nr1#sh int eth3                                                                                                                 \nethernet3 is up (since 00:02:29, 1 changes)\n description: r1@eth3[127.0.0.1 1003]-&gt;enp0s9[127.0.0.1 5003]\n type is ethernet, hwaddr=0000.1111.0003, mtu=1500, bw=100mbps, vrf=v1\n ip4 address=192.168.136.67/24, netmask=255.255.255.0, ifcid=347805334\n ip6 address=2a01:e0a:159:2856:200:11ff:fe11:3/64, netmask=ffff:ffff:ffff:ffff::, ifcid=752263581\n received 3555 packets (810051 bytes) dropped 0 packets (0 bytes)\n transmitted 18 packets (2714 bytes) promisc=false macsec=false\n</code></pre> <p>External connectitivy verification (ping Cloudfarre DNS)</p> <pre><code>r1#ping 1.1.1.1 vrf v1\npinging 1.1.1.1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=5/5/7/33\nr1#\n</code></pre> <p>Check my LAN OpenWRT wifi router <pre><code>r1#ping 192.168.136.2 vrf v1\npinging 192.168.136.2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n.!!!!\nresult=80%, recv/sent/lost/err=4/5/1/0, rtt min/avg/max/total=0/1/2/1004\nr1#\nr1#ssh 192.168.136.2 /user root vrf v1\n - connecting to 192.168.136.2 22\npassword:\n\n - securing connection\n\n\n\nBusyBox v1.30.1 () built-in shell (ash)\n\n  _______                     ________        __\n |       |.-----.-----.-----.|  |  |  |.----.|  |_\n |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|\n |_______||   __|_____|__|__||________||__|  |____|\n          |__| W I R E L E S S   F R E E D O M\n -----------------------------------------------------\n OpenWrt 19.07.4, r11208-ce6496d796\n -----------------------------------------------------\nroot@WTF-WIFI:~#\n</code></pre></p> <p>Congratulations ! You have successfully managed to insert freeRtr into your existing infrastructure.</p>"},{"location":"guides/getting-started/003-unleash/#5-conclusion","title":"5 Conclusion","text":"<p>This section demonstrated:</p> <ul> <li>How to complete freeRtr installation by installating freeRtr tools bundle</li> <li>How to reset an existing Linux interface so that it can be controlled by freeRtr</li> <li>Added a third interface to <code>r1</code>:<ul> <li>interface (<code>eth3</code> )</li> <li>and its corresponding UNIX UDP sockets (<code>127.0.0.1 1003</code> )</li> </ul> </li> <li>How bind a Linux interface through UDP socket <code>127.0.0.1 5003</code> using <code>pcapInt</code> tool included in the freeRtr addtional tools bundle.</li> <li>Configure <code>eth3</code> interface so that it could initiate IPv4 DHCP request and IPv6 SLAAC operation in order to get IPv4 and IPv6 address from local router acting as DHCP server and IPv6 SLAAC gateway.</li> </ul> <p>Note</p> <p>The article demonstrated basic <code>ping</code> and <code>ssh</code> external connectivity. However, the real power of this setup is that from there, you can activate any IGP such as OSPF or ISIS on <code>eth3</code>. You can even push further connectivity extension by enabling multihop eBGP towards external system and start behaving as an ISP ... If you have the chance to have Service Provider able to provide you MPLS services, you'll get the possibility to extend MPLS service towards any of your internal host in your network. You have guessed it, you just got a hand on the most powerful open source network swiss army knife ! In the next article, we will start implementing a small service provider with <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code> so that the lab topology can appear as an external network. The first step will to implement an IGP !</p>"},{"location":"guides/getting-started/004-igp/","title":"Let's enable intra domain routing !","text":""},{"location":"guides/getting-started/004-igp/#1-overview","title":"1 Overview","text":"<p>In Topology example you learned how to implement a local topology by declaring 4 nodes and interconnect them via UDP socket in the hardware definition file. In this page, we'll start creating a multiservice Service Provider network on top of this topology. This will be a series of articles that step by step will implement each layer needed to implement a Service Provider network. As we  verified that all interconnects were working  now let's enable an IGP !</p>"},{"location":"guides/getting-started/004-igp/#2-freertr-network-example","title":"2 freeRtr network example","text":""},{"location":"guides/getting-started/004-igp/#21-diagram","title":"2.1 Diagram","text":"<p>The demo implements a square topology:</p> <ul> <li>nodes are <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code></li> <li>edges are <code>e1[r1-r2]</code>,<code>e2[r2-r4]</code>,<code>e3[r3-r4]</code>,<code>e4[r1-r3]</code> (<code>-</code> means is \"connected to\")</li> </ul> <pre><code>  r1----e1----r2\n  |            |\n  |            |\n  e2          e2\n  |            |\n  |            |\n  r3----e1----r4\n</code></pre> <p>We will consider the following assumption:</p> <ul> <li>IGP is <code>OSPF</code></li> <li>IGP is of course bind to one VRF. Here it is VRF <code>v1</code></li> <li>Process number is 1 for both IPv4 and IPv6 address family</li> <li>All routers' interconnections <code>eth1</code> and <code>eth2</code> are in backbone <code>area 0</code></li> <li>All routers' <code>loopback0</code> are advertised into the IGP domain</li> <li>All routers' <code>router-id</code> matches <code>loopback0</code> IPv4 address</li> </ul>"},{"location":"guides/getting-started/004-igp/#22-nodes-configuration","title":"2.2 Nodes configuration","text":""},{"location":"guides/getting-started/004-igp/#221-router-r1","title":"2.2.1  router <code>r1</code>","text":"<p><code>r1-hw.txt</code> <pre><code>hwid MyDebianVM\ntcp2vrf 2321 v1 23\nint eth1 eth 0000.1111.0001 127.0.0.1 1001 127.0.0.1 2001\nint eth2 eth 0000.1111.0002 127.0.0.1 1002 127.0.0.1 3002\nint eth3 eth 0000.1111.0003 127.0.0.1 1003 127.0.0.1 5003\n</code></pre></p> <p><code>r1-sw.txt</code></p> <pre><code>r1#show config-differences\nrouter ospf4 1\n vrf v1\n router-id 2.2.2.1\n traffeng-id 0.0.0.0\n area 0 enable\n exit\nrouter ospf6 1\n vrf v1\n router-id 2.2.2.1\n traffeng-id ::\n area 0 enable\n exit\n interface ethernet1\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface ethernet2\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface loopback0\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf4 1 passive\n router ospf6 1 enable\n router ospf6 1 area 0\n router ospf6 1 passive\n exit\n</code></pre>"},{"location":"guides/getting-started/004-igp/#222-router-r2","title":"2.2.2  router <code>r2</code>","text":"<p><code>r2-hw.txt</code> <pre><code>hwid MyDebianVM\ntcp2vrf 2322 v1 23\nint eth1 eth 0000.2222.0001 127.0.0.1 2001 127.0.0.1 1001\nint eth2 eth 0000.2222.0002 127.0.0.1 2002 127.0.0.1 4002\n</code></pre></p> <p><code>r2-sw.txt</code></p> <pre><code>r2#show config-differences                                                                                 router ospf4 1\n vrf v1\n router-id 2.2.2.2\n traffeng-id 0.0.0.0\n area 0 enable\n exit\nrouter ospf6 1\n vrf v1\n router-id 2.2.2.2\n traffeng-id ::\n area 0 enable\n exit\ninterface ethernet1\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface ethernet2\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface loopback0\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf4 1 passive\n router ospf6 1 enable\n router ospf6 1 area 0\n router ospf6 1 passive\n exit\n</code></pre>"},{"location":"guides/getting-started/004-igp/#223-router-r3","title":"2.2.3  router <code>r3</code>","text":"<p><code>r3-hw.txt</code> <pre><code>hwid MyDebianVM\ntcp2vrf 2323 v1 23\nint eth1 eth 0000.3333.0001 127.0.0.1 3001 127.0.0.1 4001\nint eth2 eth 0000.3333.0002 127.0.0.1 3002 127.0.0.1 1002\n</code></pre></p> <p><code>r3-sw.txt</code></p> <pre><code>r3#show config-differences\nrouter ospf4 1\n vrf v1\n router-id 2.2.2.3\n traffeng-id 0.0.0.0\n area 0 enable\n exit\nrouter ospf6 1\n vrf v1\n router-id 2.2.2.3\n traffeng-id ::\n area 0 enable\n exit\ninterface ethernet1\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface ethernet2\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface loopback0\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf4 1 passive\n router ospf6 1 enable\n router ospf6 1 area 0\n router ospf6 1 passive\n exit\n</code></pre>"},{"location":"guides/getting-started/004-igp/#224-router-r4","title":"2.2.4  router <code>r4</code>","text":"<p><code>r4-hw.txt</code> <pre><code>hwid MyDebianVM\ntcp2vrf 2324 v1 23\nint eth1 eth 0000.4444.0001 127.0.0.1 4001 127.0.0.1 3001\nint eth2 eth 0000.4444.0002 127.0.0.1 4002 127.0.0.1 2002\n</code></pre> <code>r4-sw.txt</code> <pre><code>r4#show config-differences\nrouter ospf4 1\n vrf v1\n router-id 2.2.2.4\n traffeng-id 0.0.0.0\n area 0 enable\n exit\nrouter ospf6 1\n vrf v1\n router-id 2.2.2.4\n traffeng-id ::\n area 0 enable\n exit\ninterface ethernet1\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface ethernet2\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf6 1 enable\n router ospf6 1 area 0\n exit\ninterface loopback0\n router ospf4 1 enable\n router ospf4 1 area 0\n router ospf4 1 passive\n router ospf6 1 enable\n router ospf6 1 area 0\n router ospf6 1 passive\n exit\n</code></pre></p>"},{"location":"guides/getting-started/004-igp/#3-verification","title":"3 Verification","text":""},{"location":"guides/getting-started/004-igp/#31-launch-all-nodes","title":"3.1 Launch all nodes","text":"<p>Run <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code> in different terminal windows:</p> <p><code>r1</code> <pre><code>java -jar rtr.jar routersc r1-hw.txt r1-sw.txt\n</code></pre> <code>r2</code> <pre><code>java -jar rtr.jar routersc r2-hw.txt r2-sw.txt\n</code></pre> <code>r3</code> <pre><code>java -jar rtr.jar routersc r3-hw.txt r3-sw.txt\n</code></pre> <code>r4</code> <pre><code>java -jar rtr.jar routersc r4-hw.txt r4-sw.txt\n</code></pre></p>"},{"location":"guides/getting-started/004-igp/#32-physical-connectivity-check","title":"3.2 Physical connectivity check","text":"<ul> <li>LLDP <pre><code>r1#sh lldp nei\ninterface  hostname  iface      ipv4     ipv6\nethernet1  r2        ethernet1  1.1.1.2  1234:1::2\nethernet2  r3        ethernet2  1.1.1.6  1234:2::2\n</code></pre></li> <li>interconnectivity reachability</li> </ul> <p>ping from <code>r1@eth1</code></p> <pre><code>r1#ping 1.1.1.2 vrf v1\npinging 1.1.1.2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=1/2/5/12\n</code></pre> <p><pre><code>r1#ping 1234:1::2 vrf v1\npinging 1234:1::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/3/16\n</code></pre> ping from <code>r1@eth2</code></p> <pre><code>r1#ping 1.1.1.6 vrf v1\npinging 1.1.1.6, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/2/10\n</code></pre> <pre><code>r1#ping 1234:2::2 vrf v1\npinging 1234:2::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/4/16\nr1#\n</code></pre>"},{"location":"guides/getting-started/004-igp/#33-ospf-and-ospfv3-verification","title":"3.3 OSPF and OSPFv3 verification","text":"<ul> <li>OSPF interfaces</li> </ul> <pre><code>r1#show ipv4 ospf 1 int\ninterface  neighbors\nloopback0  0\nethernet1  1\nethernet2  1\n</code></pre> <pre><code>r1#show ipv6 ospf 1 int\ninterface  neighbors\nloopback0  0\nethernet1  1\nethernet2  1\n</code></pre> <ul> <li>OSPF neighbors</li> </ul> <pre><code>r1#show ipv4 ospf 1 nei\ninterface  area  address  routerid  state  uptime\nethernet1  0     1.1.1.2  2.2.2.2   4      01:24:16\nethernet2  0     1.1.1.6  2.2.2.3   4      01:20:51\n</code></pre> <pre><code>r1#show ipv6 ospf 1 nei\ninterface  area  address    routerid  state  uptime\nethernet1  0     1234:1::2  2.2.2.2   4      01:28:10\nethernet2  0     1234:2::2  2.2.2.3   4      01:25:18\n</code></pre> <ul> <li>OSPF database</li> </ul> <pre><code>r1#show ipv4 ospf 1 database 0\nrouterid  lsaid    sequence  type    len  time\n2.2.2.1   2.2.2.1  80000008  router  64   00:19:30\n2.2.2.2   2.2.2.2  80000006  router  64   00:18:30\n2.2.2.3   2.2.2.3  80000008  router  64   00:18:30\n2.2.2.4   2.2.2.4  80000008  router  64   00:18:00\n</code></pre> <pre><code>r1#show ipv6 ospf 1 database 0\nrouterid  lsaid      sequence  type    len  time\n2.2.2.3   399294760  80000003  link    24   00:20:27\n2.2.2.3   399294761  80000003  link    24   00:24:27\n2.2.2.3   399294762  80000003  link    24   00:24:27\n2.2.2.4   526130513  80000003  link    24   00:19:57\n2.2.2.4   526130514  80000003  link    24   00:22:57\n2.2.2.4   526130515  80000003  link    24   00:22:57\n2.2.2.2   794955991  80000003  link    24   00:20:27\n2.2.2.2   794955992  80000003  link    24   00:26:27\n2.2.2.2   794955993  80000003  link    24   00:26:27\n2.2.2.1   913665481  80000003  link    24   00:21:27\n2.2.2.1   913665482  80000004  link    24   00:00:27\n2.2.2.1   913665483  80000003  link    24   00:30:57\n2.2.2.1   0          80000005  router  36   00:24:27\n2.2.2.2   0          80000005  router  36   00:22:27\n2.2.2.3   0          80000005  router  36   00:22:27\n2.2.2.4   0          80000005  router  36   00:22:27\n2.2.2.3   399294760  80000003  prefix  32   00:20:27\n2.2.2.3   399294761  80000003  prefix  20   00:24:27\n2.2.2.3   399294762  80000003  prefix  20   00:24:27\n2.2.2.4   526130513  80000003  prefix  32   00:19:57\n2.2.2.4   526130514  80000003  prefix  20   00:22:57\n2.2.2.4   526130515  80000003  prefix  20   00:22:57\n2.2.2.2   794955991  80000003  prefix  32   00:20:27\n2.2.2.2   794955992  80000003  prefix  20   00:26:27\n2.2.2.2   794955993  80000003  prefix  20   00:26:27\n2.2.2.1   913665481  80000003  prefix  32   00:21:27\n2.2.2.1   913665482  80000004  prefix  20   00:00:27\n2.2.2.1   913665483  80000003  prefix  20   00:30:57\n</code></pre> <ul> <li>show ipv4 route v1</li> </ul> <pre><code>r1#show ipv4 route v1\ntyp  prefix       metric  iface      hop      time\nC    0.0.0.0/32   0/0     ethernet3  null     01:58:12\nC    1.1.1.0/30   0/0     ethernet1  null     01:58:13\nLOC  1.1.1.1/32   0/1     ethernet1  null     01:58:13\nC    1.1.1.4/30   0/0     ethernet2  null     01:58:13\nLOC  1.1.1.5/32   0/1     ethernet2  null     01:58:13\nO    1.1.1.8/30   110/1   ethernet1  1.1.1.2  01:46:07\nO    1.1.1.12/30  110/1   ethernet2  1.1.1.6  01:44:26\nC    2.2.2.1/32   0/0     loopback0  null     01:58:13\nO    2.2.2.2/32   110/1   ethernet1  1.1.1.2  01:40:28\nO    2.2.2.3/32   110/1   ethernet2  1.1.1.6  01:40:15\nO    2.2.2.4/32   110/2   ethernet1  1.1.1.2  01:40:06\n</code></pre> <pre><code>r1#show ipv6 route v1\ntyp  prefix                     metric  iface      hop        time\nC    1234:1::/32                0/0     ethernet1  null       01:58:24\nLOC  1234:1::1/128              0/1     ethernet1  null       01:58:24\nC    1234:2::/32                0/0     ethernet2  null       01:58:24\nLOC  1234:2::1/128              0/1     ethernet2  null       01:58:24\nO    1234:3::/32                110/1   ethernet1  1234:1::2  01:46:12\nO    1234:4::/32                110/1   ethernet2  1234:2::2  01:44:37\nC    4321::1/128                0/0     loopback0  null       01:58:24\nO    4321::2/128                110/1   ethernet1  1234:1::2  01:40:40\nO    4321::3/128                110/1   ethernet2  1234:2::2  01:40:26\nO    4321::4/128                110/2   ethernet1  1234:1::2  01:40:17\nC    fe80::/64                  0/0     ethernet3  null       01:58:24\nLOC  fe80::200:11ff:fe11:3/128  0/1     ethernet3  null       01:58:24\n</code></pre>"},{"location":"guides/getting-started/004-igp/#34-loopback-reachability-verification","title":"3.4 Loopback reachability verification","text":"<ul> <li>loopback reachability from <code>r1@eth1</code></li> </ul> <p>ping to <code>r1@lo0</code></p> <pre><code>r1#ping 2.2.2.1 vrf v1\npinging 2.2.2.1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/2/8\n</code></pre> <pre><code>r1#ping 4321::1 vrf v1\npinging 4321::1, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/0/0\n</code></pre> <p>ping to <code>r2@lo0</code></p> <pre><code>r1#ping 2.2.2.2 vrf v1\npinging 2.2.2.2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/4\n</code></pre> <pre><code>r1#ping 4321::2 vrf v1\npinging 4321::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/5/7\n</code></pre> <p>ping to <code>r3@lo0</code></p> <pre><code>r1#ping 2.2.2.3 vrf v1\npinging 2.2.2.3, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/3\n</code></pre> <pre><code>r1#ping 4321::3 vrf v1\npinging 4321::3, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/4\n</code></pre> <p>ping to <code>r4@lo0</code></p> <pre><code>r1#ping 2.2.2.4 vrf v1\npinging 2.2.2.4, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/4\n</code></pre> <pre><code>r1#ping 4321::4 vrf v1\npinging 4321::4, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/9\n</code></pre> <p>Note</p> <p><code>r2</code>,<code>r3</code> and <code>r4</code> verification is not displayed in order to avoid to clutter the article. But verification steps are obviously following the same path.</p>"},{"location":"guides/getting-started/004-igp/#3-conclusion","title":"3 Conclusion","text":"<p>This section demonstrated:</p> <ul> <li>How to implement IGP in our local square topology:<ul> <li>by configuring OSPF for IPv4 and IPv6 address family</li> <li>by explaining how to verify OSPF operation</li> </ul> </li> <li>How to verify connectivity<ul> <li>from each node of the topology</li> <li>verify loopback reachability routed by OSPF</li> </ul> </li> </ul> <p>Deploying an IGP in the entire network domain is the first step to achieve when implementing a multiservice provider network. It is not a coincidence if we advertise the loopback into the IGP. Loopbacks will be identified as iBGP nexthop within in IGP domain. But we will discuss this point in a subsequent article.</p> <p>Note</p> <p>The next step will be to implement MPLS so that each loopback can have reachability via MPLS LSP (Label Switch Path). This will be the core of the multiservice service provider backbone.</p>"},{"location":"guides/getting-started/005-mpls/","title":"Let's enable Multi Protocol Label Switching (MPLS)","text":""},{"location":"guides/getting-started/005-mpls/#1-overview","title":"1 Overview","text":"<p>In Let\u2019s enable routing you learned how to create a routing domain and activated OSPF and OSPFv3 as IGP. In SP context, next step is to activate MPLS. This page is not an MPLS deep dive lesson and will put the focus on enabling MPLS in the entire routing domain with freeRtr.</p> <p>In a nutshell, MPLS is a paradigm that will add encapsulation to the packet ingressing the SP MPLS domain. This encapsulation can be compared to a stack of labels. Each label position in the stack will have a different processing from MPLS routers within the network. A MPLS router can be a backbone router (aka P) or a provider egde router (aka PE). From the perspective of packet direction, ingress PE can proceed to label imposition (2 or more label in the stacks), the P router will simply proceed to MPLS label swap operation while the PHP or egress PE will pop the MPLS header.</p> <p>When enabling MPLS, you have to remember that there is 2 main important points you need to care about:</p> <ul> <li>Label distribution: i.e how label will be allocated within the MPLS domain</li> <li>MPLS packet operation: i.e how MPLS encapsulated packet are processed</li> </ul> <p>Note</p> <p>The above will guide you in understanding the below configuration steps.</p> <p>In the present page, we will focus on the TOP MOST label in the MPLS stack, which is corresponds to MPLS forwarding operation.</p>"},{"location":"guides/getting-started/005-mpls/#2-freertr-network-example","title":"2 freeRtr network example","text":""},{"location":"guides/getting-started/005-mpls/#21-diagram","title":"2.1 Diagram","text":"<p>The demo implements a square topology: - nodes are <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code> - edges are <code>e1[r1-r2]</code>,<code>e2[r2-r4]</code>,<code>e3[r3-r4]</code>,<code>e4[r1-r3]</code> <code>-</code> means is \"connected to\" <pre><code>  r1----e1----r2\n  |            |\n  |            |\n  e2          e2\n  |            |\n  |            |\n  r3----e1----r4\n</code></pre></p> <p>We will consider the following assumption:</p> <ul> <li>LDP will be used to distribute label</li> <li>MPLS will be activated on all routers' core interface <code>eth1</code> and <code>eth2</code></li> <li>Label distribution FECs are computed on a per IPv4 and IPv6 prefix basis</li> </ul>"},{"location":"guides/getting-started/005-mpls/#22-nodes-configuration","title":"2.2 Nodes configuration","text":""},{"location":"guides/getting-started/005-mpls/#221-router-r1r2r3r4","title":"2.2.1  router <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code>","text":"<p>We will reuse <code>&lt;*&gt;-hw.txt</code> config file from previous articles here. and add LDP configuration to <code>&lt;*&gt;-sw.txt</code> below:</p> <p><code>[r1|r2|r3|r4]-sw.txt</code></p> <pre><code>show config-differences\ninterface ethernet2\n mpls enable\n mpls ldp4\n mpls ldp6\n exit\ninterface ethernet1\n mpls enable\n mpls ldp4\n mpls ldp6\n exit\nvrf definition v1\n label-mode all-igp\n exit\n</code></pre>"},{"location":"guides/getting-started/005-mpls/#3-verification","title":"3 Verification","text":""},{"location":"guides/getting-started/005-mpls/#31-launch-all-nodes","title":"3.1 Launch all nodes","text":"<p>Run <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code> in different terminal windows:</p> <p><code>r1</code> <pre><code>java -jar rtr.jar routersc r1-hw.txt r1-sw.txt\n</code></pre> <code>r2</code> <pre><code>java -jar rtr.jar routersc r2-hw.txt r2-sw.txt\n</code></pre> <code>r3</code> <pre><code>java -jar rtr.jar routersc r3-hw.txt r3-sw.txt\n</code></pre> <code>r4</code> <pre><code>java -jar rtr.jar routersc r4-hw.txt r4-sw.txt\n</code></pre></p>"},{"location":"guides/getting-started/005-mpls/#32-physical-connectivity-check","title":"3.2 Physical connectivity check","text":"<ul> <li>LLDP</li> </ul> <pre><code>r1#sh lldp nei\ninterface  hostname  iface      ipv4     ipv6\nethernet1  r2        ethernet1  1.1.1.2  1234:1::2\nethernet2  r3        ethernet2  1.1.1.6  1234:2::2\n</code></pre> <ul> <li>MPLS interfaces</li> </ul> <pre><code>r1#show mpls interfaces\ninterface  packet  secure  ldp4   ldp6   rsvp4  rsvp6\nloopback0  false   false   false  false  false  false\nethernet1  true    false   true   true   false  false\nethernet2  true    false   true   true   false  false\nethernet3  false   false   false  false  false  false\n</code></pre> <ul> <li>interconnectivity reachability</li> </ul> <p>ping from <code>r1@eth1</code></p> <pre><code>r1#ping 1.1.1.2 vrf v1\npinging 1.1.1.2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=1/2/5/12\n</code></pre> <pre><code>r1#ping 1234:1::2 vrf v1\npinging 1234:1::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/3/16\n</code></pre> <p>ping from <code>r1@eth2</code></p> <pre><code>r1#ping 1.1.1.6 vrf v1\npinging 1.1.1.6, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/2/10\n</code></pre> <pre><code>r1#ping 1234:2::2 vrf v1\npinging 1234:2::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/1/4/16\nr1#\n</code></pre>"},{"location":"guides/getting-started/005-mpls/#33-ldp4-and-ldp6-verification","title":"3.3 LDP4 and LDP6 verification","text":"<ul> <li>LDP summary</li> </ul> <pre><code>r1#show ipv4 ldp v1 summary\nprefix         layer2         p2mp\nlearn  advert  learn  advert  learn  advert  neighbor  uptime\n10     11      0      0       0      0       1.1.1.2   01:01:51\n10     11      0      0       0      0       1.1.1.6   00:49:06\n</code></pre> <pre><code>r1#show ipv6 ldp v1 summary\nprefix         layer2         p2mp\nlearn  advert  learn  advert  learn  advert  neighbor   uptime\n10     12      0      0       0      0       1234:1::2  01:01:54\n10     12      0      0       0      0       1234:2::2  00:49:09\n</code></pre> <ul> <li>LDP neighbors</li> </ul> <pre><code>r1#show ipv4 ldp v1 neighbor 1.1.1.2 status\npeer = 1.1.1.2\ntransport = 1.1.1.2\nlsrid = 1.1.1.2\nlocal = 1.1.1.1\nuptime = 01:03:13 ago, at 2021-09-07 09:46:50\nhold time = 00:03:00\nkeepalive time = 00:01:00\nprefix learned = 10\npwe learned = 0\np2mp learned = 0\nadvertise php = false\nprefix advertised = 11 of 11\npwe advertised = 0 of 0\np2mp advertised = 0\nconnection = tx=1852(83) rx=1700(79) drp=0(0)\n\nr1#show ipv4 ldp v1 neighbor 1.1.1.6 status\npeer = 1.1.1.6\ntransport = 1.1.1.6\nlsrid = 1.1.1.6\nlocal = 1.1.1.5\nuptime = 00:50:37 ago, at 2021-09-07 09:59:36\nhold time = 00:03:00\nkeepalive time = 00:01:00\nprefix learned = 10\npwe learned = 0\np2mp learned = 0\nadvertise php = false\nprefix advertised = 11 of 11\npwe advertised = 0 of 0\np2mp advertised = 0\nconnection = tx=1618(70) rx=1466(66) drp=0(0)\n</code></pre> <pre><code>r1#show ipv6 ldp v1 neighbor 1234:1::2 status\npeer = 1234:1::2\ntransport = 1234:1::2\nlsrid = 0.0.0.2\nlocal = 1234:1::1\nuptime = 01:04:01 ago, at 2021-09-07 09:46:52\nhold time = 00:03:00\nkeepalive time = 00:01:00\nprefix learned = 10\npwe learned = 0\np2mp learned = 0\nadvertise php = false\nprefix advertised = 12 of 12\npwe advertised = 0 of 0\np2mp advertised = 0\nconnection = tx=2026(84) rx=1796(79) drp=0(0)\n\nr1#show ipv6 ldp v1 neighbor 1234:2::2 status\npeer = 1234:2::2\ntransport = 1234:2::2\nlsrid = 0.0.0.2\nlocal = 1234:2::1\nuptime = 00:51:22 ago, at 2021-09-07 09:59:36\nhold time = 00:03:00\nkeepalive time = 00:01:00\nprefix learned = 10\npwe learned = 0\np2mp learned = 0\nadvertise php = false\nprefix advertised = 12 of 12\npwe advertised = 0 of 0\np2mp advertised = 0\nconnection = tx=1810(72) rx=1580(67) drp=0(0)\n</code></pre> <ul> <li>LDP database</li> </ul> <pre><code>r1#show ipv4 ldp v1 database\nprefix       local   remote  hop\n0.0.0.0/32   910946          null\n1.1.1.0/30   910946          null\n1.1.1.1/32   910946          null\n1.1.1.4/30   910946          null\n1.1.1.5/32   910946          null\n1.1.1.8/30   129003  800494  1.1.1.2\n1.1.1.12/30  521087  785657  1.1.1.6\n2.2.2.1/32   910946          null\n2.2.2.2/32   295827  800494  1.1.1.2\n2.2.2.3/32   815108  785657  1.1.1.6\n2.2.2.4/32   625208  452135  1.1.1.2\n</code></pre> <pre><code>r1#show ipv6 ldp v1 database\nprefix                     local    remote  hop\n1234:1::/32                60611            null\n1234:1::1/128              60611            null\n1234:2::/32                60611            null\n1234:2::1/128              60611            null\n1234:3::/32                320237   596028  1234:1::2\n1234:4::/32                370786   383223  1234:2::2\n4321::1/128                60611            null\n4321::2/128                363162   596028  1234:1::2\n4321::3/128                1035264  383223  1234:2::2\n4321::4/128                255927   739648  1234:1::2\nfe80::/64                  60611            null\nfe80::200:11ff:fe11:3/128  60611            null\n</code></pre> <ul> <li>show ip[v4|v6] route v1</li> </ul> <pre><code>r1#sh ipv4 route v1\ntyp  prefix       metric  iface      hop      time\nC    0.0.0.0/32   0/0     ethernet3  null     01:58:44\nC    1.1.1.0/30   0/0     ethernet1  null     01:58:45\nLOC  1.1.1.1/32   0/1     ethernet1  null     01:58:45\nC    1.1.1.4/30   0/0     ethernet2  null     01:58:44\nLOC  1.1.1.5/32   0/1     ethernet2  null     01:58:44\nO    1.1.1.8/30   110/1   ethernet1  1.1.1.2  01:58:27\nO    1.1.1.12/30  110/1   ethernet2  1.1.1.6  01:58:16\nC    2.2.2.1/32   0/0     loopback0  null     01:58:45\nO    2.2.2.2/32   110/1   ethernet1  1.1.1.2  01:58:27\nO    2.2.2.3/32   110/1   ethernet2  1.1.1.6  01:58:16\nO    2.2.2.4/32   110/2   ethernet1  1.1.1.2  01:58:10\n</code></pre> <pre><code>r1#sh ipv6 route v1\ntyp  prefix                     metric  iface      hop        time\nC    1234:1::/32                0/0     ethernet1  null       01:58:50\nLOC  1234:1::1/128              0/1     ethernet1  null       01:58:50\nC    1234:2::/32                0/0     ethernet2  null       01:58:50\nLOC  1234:2::1/128              0/1     ethernet2  null       01:58:50\nO    1234:3::/32                110/1   ethernet1  1234:1::2  01:58:32\nO    1234:4::/32                110/1   ethernet2  1234:2::2  01:58:21\nC    4321::1/128                0/0     loopback0  null       01:58:50\nO    4321::2/128                110/1   ethernet1  1234:1::2  01:58:32\nO    4321::3/128                110/1   ethernet2  1234:2::2  01:58:21\nO    4321::4/128                110/2   ethernet1  1234:1::2  01:58:15\nC    fe80::/64                  0/0     ethernet3  null       01:58:50\nLOC  fe80::200:11ff:fe11:3/128  0/1     ethernet3  null       01:58:50\n</code></pre>"},{"location":"guides/getting-started/005-mpls/#34-loopback-reachability-verification-using-traceroute","title":"3.4 Loopback reachability verification using traceroute","text":"<ul> <li>loopback reachability from <code>r1@eth1</code></li> </ul> <p>traceroute to <code>r1@lo0</code></p> <pre><code>r1#traceroute 2.2.2.1 vrf v1\ntracing 2.2.2.1, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 2.2.2.1 time=1\n</code></pre> <pre><code>r1#traceroute 4321::1 vrf v1\ntracing 4321::1, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 4321::1 time=0\n</code></pre> <p>traceroute to <code>r2@lo0</code></p> <pre><code>traceroute 2.2.2.2 vrf v1\n\ntracing 2.2.2.1, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 2.2.2.1 time=1\nr1#traceroute 2.2.2.2 vrf v1\n</code></pre> <pre><code>r1#traceroute 4321::2 vrf v1\ntracing 4321::2, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1234:1::1 time=0\n2 4321::2 time=1, mpls=596028\n</code></pre> <p>traceroute to <code>r3@lo0</code></p> <pre><code>traceroute 2.2.2.3 vrf v1\ntracing 2.2.2.3, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1.1.1.5 time=0\n2 2.2.2.3 time=2, mpls=785657\n</code></pre> <pre><code>r1#traceroute 4321::3 vrf v1\ntracing 4321::3, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1234:2::1 time=0\n2 4321::3 time=0, mpls=383223\n</code></pre> <p>traceroute to <code>r4@lo0</code></p> <pre><code>r1#traceroute 2.2.2.4 vrf v1\ntracing 2.2.2.4, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1.1.1.1 time=0\n2 1.1.1.9 time=0, mpls=452135\n3 2.2.2.4 time=1, mpls=539881\n</code></pre> <pre><code>r1#traceroute 4321::4 vrf v1\ntracing 4321::4, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1234:1::1 time=0\n2 1234:3::1 time=1, mpls=739648\n3 4321::4 time=1, mpls=1023984\n</code></pre> <p>From the traceroutes output you observe that LSP paths are used. (except for directly connected loopback of course)</p> <p>Note</p> <p><code>r2</code>,<code>r3</code> and <code>r4</code> verification is not displayed in order to avoid to clutter the article. But verification steps are obviously following the same path.</p>"},{"location":"guides/getting-started/005-mpls/#3-conclusion","title":"3 Conclusion","text":"<p>This section demonstrated:</p> <ul> <li>How to implement MPLS in our local square topology:<ul> <li>by configuring LDP for IPv4 and IPv6 address family</li> <li>by explaining how to verify LDP operation</li> </ul> </li> <li>How to verify connectivity<ul> <li>from each node of the topology</li> <li>verify loopback reachability using traceroute and check MPLS LSP</li> </ul> </li> </ul> <p>You learned how to enable MPLS forwarding with LDP as label distribution protocol. You also verified that IPv4 and IPv6 network prefixes are considered as FEC from LDP perspective. Among these FEC you also checked that each router loopbacks are reachable using a MPLS LSP signalled by LDP. From SP perspective, we are now almost ready, this is still one configuration step before being able to implement MPLS service on top of the MLPS core you just created: configure iBGP between PE. But we will discuss this point in a subsequent article.</p> <p>Note</p> <p>In this article, we used LDP with a <code>all-igp</code> label distribution mode. This mode is similar to Cisco default LDP behavior. freeRtr gives you the possibility to fine tune label allocation which will help to save label space. it also feature a functionality that allows you to control which label the router advertises to other ldp neighbors. Obviously the latter won't not contribute to label space saving. freeRtr also support targeted LDP (Useful to to establish LDP session between non directly connected routers)</p>"},{"location":"guides/getting-started/006-ibgp/","title":"BGP in service provider network","text":""},{"location":"guides/getting-started/006-ibgp/#1-overview","title":"1 Overview","text":"<p>In Let\u2019s enable MPLS you learned how to enable MPLS forwarding on top of an IGP in the entire routing domain. From that point:</p> <ul> <li>Label reachability information is signalled between nodes using LDP relying on IGP database</li> <li>Effective traffic data path between any forwarding equivalent class (IPv4 and IPv6) is following a what we call a <code>MPLS LSP</code></li> </ul> <p>Note</p> <p>However, all of this is true only for internal IPv4 &amp; IPv6 in the routing domain. In a SP environment, the backbone is interconnecting customer sites with dedicated CPE routers. CPEs can act as BGP peers advertising customer prefixes. These NLRI(s) is external to the SP domain and thus should must not be injected into the IGP.</p> <p>This is where BGP comes into play. BGP is also assimilated as an Exterior Routing Protocol (EGP). In a nutshell, BGP is used to signal:</p> <ul> <li>From the perspective of an external packet entering the SP domain (i.e ingress Border SP router)</li> <li>The best exit point from the very same domain (i.e egress Border SP router)</li> </ul> <p>Indifferently, you'll see in the litterature the terms <code>ingress PE</code> and <code>egress PE</code>.</p> <p>Practically:</p> <ul> <li><code>egress PE</code> is the BGP nexthop -</li> <li>for a packet sourced from customer <code>subnet A</code> in <code>site A</code></li> <li>arriving at <code>ingress PE</code></li> <li>in order to reach customer <code>subnet B</code> in <code>site B</code></li> </ul> <p>Note</p> <p>It is important to understand that, BGP does not provide any indication related to the path taken by the packet in order to reach the egress PE from the ingress PE. This forwarding is handled by the MPLS core you implemented in the last article. This means that BGP is needed only on border nodes (PE) connecting customer and not in the core (P) routers in the SP backbone.</p> <p>Now you can use 3 techniques in order to enable iBGP in the core network:</p> <ul> <li>iBGP Full mesh</li> <li>BGP confederations</li> <li>BGP route reflector</li> </ul>"},{"location":"guides/getting-started/006-ibgp/#2-freertr-network-example","title":"2 freeRtr network example","text":""},{"location":"guides/getting-started/006-ibgp/#21-diagram","title":"2.1 Diagram","text":"<p>The demo implements a square topology: - nodes are <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code> - edges are <code>e1[r1-r2]</code>,<code>e2[r2-r4]</code>,<code>e3[r3-r4]</code>,<code>e4[r1-r3]</code> <code>-</code> means is \"connected to\" <pre><code>  r1----e1----r2\n  |            |\n  |            |\n  e2          e2\n  |            |\n  |            |\n  r3----e1----r4\n</code></pre></p> <p>We will consider the following assumption:</p> <ul> <li>Route Reflection will be used</li> <li><code>r4</code> is the route reflector (RR)</li> <li><code>r1</code>,<code>r2</code>,<code>r3</code> are route reflector client (RRc)</li> <li>iBGP session will be established using <code>Loopback0</code></li> </ul>"},{"location":"guides/getting-started/006-ibgp/#22-nodes-configuration","title":"2.2 Nodes configuration","text":""},{"location":"guides/getting-started/006-ibgp/#221-router-r1r2r3r4","title":"2.2.1  router <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code>","text":"<p>We will reuse <code>&lt;*&gt;-hw.txt</code> config file from previous articles here. and add BGP configuration to <code>&lt;*&gt;-sw.txt</code> below:</p> <ul> <li>RR</li> </ul> <p><code>r4-sw.txt</code></p> <pre><code>object-group network RR-CLIENT-NET4\n description IPv4 RR client subnet\n sequence 10 2.2.2.0 255.255.255.0\n exit\nobject-group network RR-CLIENT-NET6\n description IPv6 RR client subnet\n sequence 10 4321:: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00\n exit\naccess-list ACL-IPv4-RR-CLIENT\n sequence 10 permit all obj RR-CLIENT-NET4 all any all\n exit\naccess-list ACL-IPv6-RR-CLIENT\n sequence 10 permit all obj RR-CLIENT-NET6 all any all\n exit\nroute-policy NHT\n sequence 10 if distance 110\n sequence 20   pass\n sequence 30 else\n sequence 40   drop\n sequence 50 enif\n exit\nrouter bgp4 1\n vrf v1\n local-as 65535\n router-id 2.2.2.4\n address-family unicast multicast flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n nexthop route-policy NHT\n template bgp4 remote-as 65535\n template bgp4 description rr clients\n template bgp4 local-as 65535\n template bgp4 address-family unicast multicast ouni omlt flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n template bgp4 distance 255\n template bgp4 connection-mode active\n template bgp4 compression both\n template bgp4 update-source loopback0\n template bgp4 hostname\n template bgp4 aigp\n template bgp4 traffeng\n template bgp4 pmsitun\n template bgp4 tunenc\n template bgp4 attribset\n template bgp4 segrout\n template bgp4 bier\n template bgp4 route-reflector-client\n template bgp4 next-hop-unchanged\n template bgp4 send-community all\n listen ACL-IPv4-RR-CLIENT bgp4\n exit\nrouter bgp6 1\n vrf v1\n local-as 65535\n router-id 2.2.2.4\n address-family unicast multicast ouni omlt flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n nexthop route-policy NHT\n template bgp6 remote-as 65535\n template bgp6 description rr clients\n template bgp6 local-as 65535\n template bgp6 address-family unicast multicast ouni omlt flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n template bgp6 distance 255\n template bgp6 connection-mode active\n template bgp6 compression both\n template bgp6 update-source loopback0\n template bgp6 hostname\n template bgp6 aigp\n template bgp6 traffeng\n template bgp6 pmsitun\n template bgp6 tunenc\n template bgp6 attribset\n template bgp6 segrout\n template bgp6 bier\n template bgp6 route-reflector-client\n template bgp6 next-hop-unchanged\n template bgp6 send-community all\n listen ACL-IPv6-RR-CLIENT bgp6\n exit\n</code></pre> <ul> <li>RR clients</li> </ul> <p><code>[r1|r2|r3]-sw.txt</code></p> <pre><code>show config-differences\nrouter bgp4 1\n vrf v1\n local-as 65535\n router-id 2.2.2.[1|2|3]\n address-family unicast multicast ouni omlt flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n neighbor 2.2.2.4 remote-as 65535\n neighbor 2.2.2.4 description RR[r4]\n neighbor 2.2.2.4 local-as 65535\n neighbor 2.2.2.4 address-family unicast multicast ouni omlt flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n neighbor 2.2.2.4 distance 200\n neighbor 2.2.2.4 update-source loopback0\n template 2.2.2.4 hostname\n template 2.2.2.4 aigp\n template 2.2.2.4 traffeng\n template 2.2.2.4 pmsitun\n template 2.2.2.4 tunenc\n template 2.2.2.4 attribset\n template 2.2.2.4 segrout\n template 2.2.2.4 bier\n template 2.2.2.4 send-community all\n exit\nrouter bgp6 1\n vrf v1\n local-as 65535\n router-id 2.2.2.[1|2|3]\n address-family unicast multicast ouni omlt flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n neighbor 4321::4 remote-as 65535\n neighbor 4321::4 description RR[r4]\n neighbor 4321::4 local-as 65535\n neighbor 4321::4 address-family unicast multicast ouni omlt flowspec vpnuni vpnmlt vpnflw ovpnuni ovpnmlt ovpnflw vpls mspw evpn mdt srte mvpn omvpn\n neighbor 4321::4 distance 200\n neighbor 4321::4 update-source loopback0\n template 4321::4 hostname\n template 4321::4 aigp\n template 4321::4 traffeng\n template 4321::4 pmsitun\n template 4321::4 tunenc\n template 4321::4 attribset\n template 4321::4 segrout\n template 4321::4 bier\n template 4321::4 send-community all\n exit\n</code></pre>"},{"location":"guides/getting-started/006-ibgp/#3-verification","title":"3 Verification","text":""},{"location":"guides/getting-started/006-ibgp/#31-launch-all-nodes","title":"3.1 Launch all nodes","text":"<p>Run <code>r1</code>,<code>r2</code>,<code>r3</code>,<code>r4</code> in different terminal windows:</p> <p><code>r1</code> <pre><code>java -jar rtr.jar routersc r1-hw.txt r1-sw.txt\n</code></pre> <code>r2</code> <pre><code>java -jar rtr.jar routersc r2-hw.txt r2-sw.txt\n</code></pre> <code>r3</code> <pre><code>java -jar rtr.jar routersc r3-hw.txt r3-sw.txt\n</code></pre> <code>r4</code> <pre><code>java -jar rtr.jar routersc r4-hw.txt r4-sw.txt\n</code></pre></p>"},{"location":"guides/getting-started/006-ibgp/#32-connectivity-between-rr-and-rr-client-r1","title":"3.2 Connectivity between RR and RR client <code>r1</code>","text":"<ul> <li><code>r4</code> (RR) reachability from <code>r1</code></li> </ul> <p>Note</p> <p>In order to avoid cluttering the page, verification will be done for IPv4 only. You can do IPv6 checks as an exercice.  :-)</p> <p>TL;DR</p> <pre><code>r1#show ipv4 route v1 | i 2.2.2.4\nO    2.2.2.4/32   110/2   ethernet1  1.1.1.2  01:18:47\n</code></pre> <p>Note</p> <p>Notice that the route has OSPF <code>O</code> tag</p> <p>Detailed ouput</p> <pre><code>r1#show ipv4 route v1 2.2.2.4\nvrf = v1:4\nipver = 4\nrd = 0:0\nprefix = 2.2.2.4/128\nprefix network = 2.2.2.4\nprefix broadcast = 2.2.2.4\nprefix wildcard = ::\nprefix netmask = ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\nnlri = n/a\nalternates = 1\nalternate #0 attributes: ecmp=true best=true\ntype = ospf4 1\nsource = 2.2.2.4\nvalidity = 0\nsegment routing index = 0\nsegment routing old base = 0\nsegment routing base = 0\nsegment routing size = 0\nsegment routing prefix = null\nbier index = 0\nbier old base = 0\nbier base = 0\nbier range = 0\nbier size = 0-32\nupdated = 2021-09-09 08:24:18 (01:18:32 ago)\nversion = 0\ndistance = 110\nmetric = 2\nident = 0\nhops = 2\ninterface = ethernet1\ntable = null\nnexthop = 1.1.1.2\noriginal nexthop = null\ntag = 0\norigin type = 109\nlocal preference = 0\nevpn label*16 = 0\nattribute as = 0\nattribute value = n/a\ntunnel type = 0\ntunnel value = n/a\nlink state = n/a\npmsi type = 0\npmsi label*16 = 0\npmsi tunnel = n/a\naccumulated igp = 0\nbandwidth = 0\natomic aggregator = false\naggregator as = 0\naggregator router = null\noriginator = null\ncluster list =\nas path (len=0) =\nstandard community =\nextended community =\nlarge community =\ninternal source = 0\nlocal label = 471761\nremote label = 527160\ncounter = null\nhardware counter = null\n</code></pre> <p>Note</p> <p>Pay attention to MPLS <code>local label = 471761</code> and <code>remote label = 527160</code>, this is the first segment of the MPLS LSP path toward <code>r4</code></p> <pre><code>r1#ping 2.2.2.4 vrf v1\npinging 2.2.2.4, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/total=0/0/1/7\n</code></pre> <pre><code>r1#traceroute 2.2.2.4 vrf v1\ntracing 2.2.2.4, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1.1.1.1 time=0\n2 1.1.1.9 time=1, mpls=527160\n3 2.2.2.4 time=1, mpls=95859\n</code></pre> <p>Note</p> <p>Obviously, you observe that MPLS LSP is used and notice the second hop MPLS label: <code>mpls=527160</code></p>"},{"location":"guides/getting-started/006-ibgp/#check-from-r4-rr","title":"Check from <code>r4</code> RR","text":"<ul> <li>BGP summary</li> </ul> <pre><code>r4#show ipv4 bgp 1 summary\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   2.2.2.1   01:27:17\n65535  0      0     true   2.2.2.2   01:27:15\n65535  0      0     true   2.2.2.3   01:27:13\n</code></pre> <pre><code>r4#show ipv6 bgp 1 summary\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   4321::1   01:27:20\n65535  0      0     true   4321::2   01:27:19\n65535  0      0     true   4321::3   01:27:18\n</code></pre> <ul> <li>BGP neighbor session with <code>r1</code></li> </ul> <p>On a per address family</p> <pre><code>r4#show ipv4 bgp 1 neighbor 2.2.2.1 ?\n  config    - peer configuration\n  evpn      - address family to show\n  flowspec  - address family to show\n  labeled   - address family to show\n  linkstate - address family to show\n  mdt       - address family to show\n  mspw      - address family to show\n  multicast - address family to show\n  mvpn      - address family to show\n  oflw      - address family to show\n  olab      - address family to show\n  omlt      - address family to show\n  omvpn     - address family to show\n  osrt      - address family to show\n  ouni      - address family to show\n  ovpnflw   - address family to show\n  ovpnmlt   - address family to show\n  ovpnuni   - address family to show\n  srte      - address family to show\n  status    - peer status\n  unicast   - address family to show\n  vpls      - address family to show\n  vpnflw    - address family to show\n  vpnmlt    - address family to show\n  vpnuni    - address family to show\n</code></pre> <pre><code>r4#show ipv6 bgp 1 neighbor 4321::1 ?\n  config    - peer configuration\n  evpn      - address family to show\n  flowspec  - address family to show\n  labeled   - address family to show\n  linkstate - address family to show\n  mdt       - address family to show\n  mspw      - address family to show\n  multicast - address family to show\n  mvpn      - address family to show\n  oflw      - address family to show\n  olab      - address family to show\n  omlt      - address family to show\n  omvpn     - address family to show\n  osrt      - address family to show\n  ouni      - address family to show\n  ovpnflw   - address family to show\n  ovpnmlt   - address family to show\n  ovpnuni   - address family to show\n  srte      - address family to show\n  status    - peer status\n  unicast   - address family to show\n  vpls      - address family to show\n  vpnflw    - address family to show\n  vpnmlt    - address family to show\n  vpnuni    - address family to show\n</code></pre> <ul> <li>BGP database</li> </ul> <pre><code>r4#show ipv6 bgp 1 unicast database\nprefix  hop  metric  aspath\n</code></pre> <pre><code>r4#show ipv4 bgp 1 unicast database\nprefix  hop  metric  aspath\n</code></pre> Info <p>What ??!! BGP database is empty ! =&gt; Well this actually is normal as there is no external NLRI advertised for now. Remember, BGP is used to enable connectivity between netwosks external to the SP domain. As we don't have any customer for now this is normal to have BGP database empty.</p> <ul> <li>show ip[v4|v6] route v1</li> </ul> <pre><code>r4#show ipv4 route v1\ntyp  prefix       metric  iface      hop       time\nO    1.1.1.0/30   110/1   ethernet2  1.1.1.9   01:33:39\nO    1.1.1.4/30   110/1   ethernet1  1.1.1.13  01:33:39\nC    1.1.1.8/30   0/0     ethernet2  null      01:33:42\nLOC  1.1.1.10/32  0/1     ethernet2  null      01:33:42\nC    1.1.1.12/30  0/0     ethernet1  null      01:33:43\nLOC  1.1.1.14/32  0/1     ethernet1  null      01:33:43\nO    2.2.2.1/32   110/2   ethernet2  1.1.1.9   01:33:39\nO    2.2.2.2/32   110/1   ethernet2  1.1.1.9   01:33:39\nO    2.2.2.3/32   110/1   ethernet1  1.1.1.13  01:33:39\nC    2.2.2.4/32   0/0     loopback0  null      01:33:43\n</code></pre> <pre><code>r4#show ipv6 route v1\ntyp  prefix         metric  iface      hop        time\nO    1234:1::/32    110/2   ethernet1  1234:4::1  01:33:44\nO    1234:2::/32    110/1   ethernet1  1234:4::1  01:33:44\nC    1234:3::/32    0/0     ethernet2  null       01:33:47\nLOC  1234:3::2/128  0/1     ethernet2  null       01:33:47\nC    1234:4::/32    0/0     ethernet1  null       01:33:48\nLOC  1234:4::2/128  0/1     ethernet1  null       01:33:48\nO    4321::1/128    110/2   ethernet1  1234:4::1  01:33:44\nO    4321::2/128    110/3   ethernet1  1234:4::1  01:33:44\nO    4321::3/128    110/1   ethernet1  1234:4::1  01:33:44\nC    4321::4/128    0/0     loopback0  null       01:33:48\n</code></pre> <p>Note</p> <p>Of course, there is no BGP routes in the SP routing table and this is what we want ! Imagine the burden you'll add to your IGP if you redistributed the entire Internet full routing table ...</p>"},{"location":"guides/getting-started/006-ibgp/#34-rr-loopback0-reachability-verification-from-rr-client","title":"3.4 RR <code>Loopback0</code> reachability verification from RR client","text":"<ul> <li>BGP loopback reachability from <code>r1@eth1</code></li> </ul> <p>From RR client <code>r1@lo0</code></p> <pre><code>r1#sh ipv4 bgp 1 sum\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   2.2.2.4   01:40:44\n\nr1#traceroute 2.2.2.4 vrf v1\nr1#traceroute 2.2.2.4 vrf v1 /interface lo0\ntracing 2.2.2.4, src=2.2.2.1, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 2.2.2.1 time=0\n2 1.1.1.9 time=3, mpls=527160\n3 2.2.2.4 time=1, mpls=95859\n</code></pre> <pre><code>r1#sh ipv6 bgp 1 sum\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   4321::4   01:39:58\n\nr1#traceroute 4321::4 vrf v1 /interface lo0\ntracing 4321::4, src=4321::1, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 4321::1 time=0\n2 1234:4::1 time=2, mpls=76040\n3 4321::4 time=1, mpls=463804\n</code></pre> <p>From RR client <code>r2@lo0</code></p> <pre><code>r2#show ipv4 bgp 1 sum\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   2.2.2.4   01:41:33\n\nr2#traceroute 2.2.2.4 vrf v1 /interface lo0\ntracing 2.2.2.4, src=2.2.2.2, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 2.2.2.2 time=0\n2 2.2.2.4 time=0, mpls=95859\n</code></pre> <pre><code>r2#show ipv6 bgp 1 sum\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   4321::4   01:44:26\n\nr2#traceroute 4321::4 vrf v1\nr2#traceroute 4321::4 vrf v1 /interface lo0\ntracing 4321::4, src=4321::2, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 4321::2 time=0\n2 1234:2::1 time=2, mpls=46041\n3 1234:4::1 time=3, mpls=76040\n4 4321::4 time=2, mpls=463804\n</code></pre> <p>From RR client <code>r3@lo0</code></p> <pre><code>r3#show ipv4 bgp 1 sum\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   2.2.2.4   01:42:54\n\nr3#traceroute 2.2.2.4 vrf v1 /interface lo0\ntracing 2.2.2.4, src=2.2.2.3, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 2.2.2.3 time=0\n2 2.2.2.4 time=1, mpls=95859\n</code></pre> <p><pre><code>r3#show ipv6 bgp 1 sum\nas     learn  sent  ready  neighbor  uptime\n65535  0      0     true   4321::4   01:46:06\n\nr3#traceroute 4321::4 vrf v1 /interface lo0\ntracing 4321::4, src=4321::3, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 4321::3 time=0\n2 4321::4 time=1, mpls=463804\n</code></pre> From RR <code>r4@lo0</code></p> <pre><code>r1#traceroute 2.2.2.4 vrf v1\ntracing 2.2.2.4, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1.1.1.1 time=0\n2 1.1.1.9 time=0, mpls=452135\n3 2.2.2.4 time=1, mpls=539881\n</code></pre> <pre><code>r1#traceroute 4321::4 vrf v1\ntracing 4321::4, src=null, vrf=v1, prt=0/33440, tim=1000, tos=0, len=64\n1 1234:1::1 time=0\n2 1234:3::1 time=1, mpls=739648\n3 4321::4 time=1, mpls=1023984\n</code></pre> <p>Note</p> <p><code>r2</code>,<code>r3</code> and <code>r4</code> verification is not displayed in order to avoid to clutter the article. But verification steps are obviously following the same path.</p>"},{"location":"guides/getting-started/006-ibgp/#3-conclusion","title":"3 Conclusion","text":"<p>This section demonstrated:</p> <ul> <li>How to implement iBGP on top of our local square topology:<ul> <li>by configuring BGP route reflection <code>r4</code> is RR and <code>r1</code>,<code>r2</code>,<code>r3</code> are RR clients</li> <li>by configuring BGP for IPv4 and IPv6 address family and a gigantic list of SAFI</li> <li>by explaining how to verify BGP operation</li> </ul> </li> <li>How to verify connectivity<ul> <li>from each RR client of the topology</li> <li>verify RR loopback reachability from all RR clients check MPLS LSP</li> </ul> </li> </ul> <p>You learned how to enable iBGP on top of the SP domain using RR paradigm. However, we saw that BGP database was empty. Which is totally normal as we don't have any customer yet. BGP is used to signal external networks reachability within the SP backbone between SP autonomous system border router. This will be discussed in a subsequent article.</p> <p>Note</p> <p>Before jumping to next article, let's take 5 minutes and contemplate <code>rr4</code> BGP configuration. From this stanza, you notice nitty gritty details that demonstrates all the attention and craftmanship :-) that mc36 brought to freeRtr CLI:</p> <ul> <li><code>object-group</code> very useful to simplify access list writing/reading</li> <li>BGP <code>nexthop tracking</code> feature</li> <li>Using Route Policy Language (<code>rpl</code>)</li> <li>the impressive list of supported <code>SAFI</code> for for <code>AFI</code> IPv4 and IPv6 (incomplete list ...)</li> <li>Usage of the <code>template</code> keyword summoned via <code>listen</code> command</li> <li><code>listen</code> CLI keyword. For those who configured RR back in 1998 can understand the convenience brought by this command. (Granted the fact that with have BGP <code>template</code>)</li> </ul> Info <p>These features are usually found on high end commercial platform.</p>"},{"location":"guides/getting-started/007-polka/","title":"Let\u2019s enable PolKA","text":""},{"location":"guides/getting-started/007-polka/#1-overview","title":"1 Overview","text":"<p>Source routing (SR) is a prominent alternative to table-based routing for reducing the number of network states. In this approach, a source adds a route label in the packet header to provide deterministic paths for traffic engineering. The residue number system (RNS) is a promising way of executing fully stateless SR, in which forwarding decisions rely on a simple modulo operation over a route label. In this context, PolKA (Polynomial Key-based Architecture), explores binary polynomial arithmetic to propose a novel RNS-based SR. Herein, this tutorial shows how to enable PolKA in FreeRouter, create tunnels and migrate between different tunnels.</p>"},{"location":"guides/getting-started/007-polka/#2-freertr-network-example","title":"2 freeRtr network example","text":""},{"location":"guides/getting-started/007-polka/#21-diagram","title":"2.1 Diagram","text":"<p>The demo implements a square topology: - core nodes are <code>r1</code>, <code>r2</code>, <code>r3</code>, <code>r4</code> - edge nodes are <code>r5</code>, <code>r6</code> <pre><code>r5----e3----r1----e1----r4\n            |            |\n            |            |\n            e2          e2\n            |            |\n            |            |\nr6----e3----r2----e1----r3\n</code></pre> This topology presents two paths between r5 and r6, which will be used to create PolKA tunnels: - A shortest path: <code>r1</code>- <code>r2</code> - A longest path: <code>r1</code>- <code>r2</code>-<code>r3</code>-<code>r4</code></p>"},{"location":"guides/getting-started/007-polka/#21-diagram_1","title":"2.1 Diagram","text":""},{"location":"guides/getting-started/007-polka/#22-core-nodes-configuration","title":"2.2 Core Nodes configuration","text":""},{"location":"guides/getting-started/007-polka/#221-routers-r1-r2-r3-r4","title":"2.2.1  routers <code>r1</code>, <code>r2</code>, <code>r3</code>, <code>r4</code>","text":"<p><code>r1-hw.txt</code></p> <pre><code>int eth1 eth 0000.1111.0001 127.0.0.1 16011 127.0.0.1 16021\nint eth2 eth 0000.1111.0003 127.0.0.1 16013 127.0.0.1 16023\nint eth3 eth 0000.1111.0005 127.0.0.1 16015 127.0.0.1 16025\ntcp2vrf 2121 v1 23\n</code></pre> <p><code>r1-sw.txt</code></p> <pre><code>hostname R1\n!\nvrf definition v1\n rd 1:1\n exit\n!\nrouter lsrp4 1\n vrf v1\n router-id 10.1.1.1\n segrout 20 1\n redistribute connected\n exit\n!\nrouter lsrp6 1\n vrf v1\n router-id 10.6.1.1\n segrout 20 1\n redistribute connected\n exit\n!\ninterface template1\n no description\n lldp enable\n vrf forwarding v1\n ipv4 address dynamic dynamic\n polka enable 1 65536 20\n mpls enable\n router lsrp4 1 enable\n shutdown\n no log-link-change\n exit\n!\ninterface loopback0\n description lo R1\n vrf forwarding v1\n ipv4 address 20.20.20.1 255.255.255.255\n ipv6 address 2020::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet1\n description R1@eth1 --&gt; R4@eth1\n vrf forwarding v1\n ipv4 address 1.1.1.1 255.255.255.252\n ipv6 address 1111:1::1 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet2\n description R1@eth2 --&gt; R2@eth3\n vrf forwarding v1\n ipv4 address 2.2.2.2 255.255.255.252\n ipv6 address 2222::2 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet3\n description R1@eth3 --&gt; R5@eth1\n vrf forwarding v1\n ipv4 address 11.11.11.2 255.255.255.252\n ipv6 address 1111::2 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\nserver telnet tel\n security protocol telnet\n exec timeout 10000000\n exec logging\n exec colorize prompt\n no exec authorization\n no login authentication\n login logging\n vrf v1\n exit\n!\nend\n</code></pre> <p><code>r2-hw.txt</code></p> <pre><code>int eth1 eth 0000.2222.0001 127.0.0.1 26011 127.0.0.1 26021\nint eth2 eth 0000.2222.0002 127.0.0.1 26012 127.0.0.1 26022\nint eth3 eth 0000.2222.0003 127.0.0.1 16023 127.0.0.1 16013\ntcp2vrf 2222 v1 23\n</code></pre> <p><code>r2-sw.txt</code></p> <pre><code>hostname R2\n!\n!\nvrf definition v1\n rd 1:1\n exit\n!\nrouter lsrp4 1\n vrf v1\n router-id 10.2.2.2\n segrout 20 2\n redistribute connected\n exit\n!\nrouter lsrp6 1\n vrf v1\n router-id 10.6.2.2\n segrout 20 2\n redistribute connected\n exit\n!\ninterface template1\n no description\n lldp enable\n vrf forwarding v1\n ipv4 address dynamic dynamic\n polka enable 2 65536 20\n mpls enable\n router lsrp4 1 enable\n shutdown\n no log-link-change\n exit\n!\ninterface loopback0\n description lo R2\n vrf forwarding v1\n ipv4 address 20.20.20.2 255.255.255.255\n ipv6 address 2020::2 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet1\n description R2@eth1 --&gt; R6@eth1\n vrf forwarding v1\n ipv4 address 7.7.7.2 255.255.255.252\n ipv6 address 7777::2 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet2\n description R2@eth2 --&gt; R3eth1\n vrf forwarding v1\n ipv4 address 6.6.6.1 255.255.255.252\n ipv6 address 6666::1 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet3\n description R2@eth3 --&gt; R1@eth2\n vrf forwarding v1\n ipv4 address 2.2.2.1 255.255.255.252\n ipv6 address 2222::1 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\nserver telnet tel\n security protocol telnet\n exec timeout 10000000\n exec logging\n exec colorize prompt\n no exec authorization\n no login authentication\n login logging\n vrf v1\n exit\n!\nend\n</code></pre> <p><code>r3-hw.txt</code></p> <pre><code>int eth1 eth 0000.3333.0002 127.0.0.1 26022 127.0.0.1 26012\nint eth2 eth 0000.3333.0003 127.0.0.1 46023 127.0.0.1 46013\ntcp2vrf 2323 v1 23\n</code></pre> <p><code>r3-sw.txt</code></p> <pre><code>hostname R3\n!\nvrf definition v1\n rd 1:1\n exit\n!\nrouter lsrp4 1\n vrf v1\n router-id 10.3.3.3\n segrout 20 3\n redistribute connected\n exit\n!\nrouter lsrp6 1\n vrf v1\n router-id 10.6.3.3\n segrout 20 3\n redistribute connected\n exit\n!\ninterface template1\n no description\n lldp enable\n vrf forwarding v1\n ipv4 address dynamic dynamic\n polka enable 3 65536 20\n mpls enable\n router lsrp4 1 enable\n shutdown\n no log-link-change\n exit\n!\ninterface loopback0\n description lo R3\n vrf forwarding v1\n ipv4 address 20.20.20.3 255.255.255.255\n ipv6 address 2020::3 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet1\n description R3@eth1 --&gt; R2@eth2\n vrf forwarding v1\n ipv4 address 6.6.6.2 255.255.255.252\n ipv6 address 6666::2 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet2\n description R3@eth2 --&gt; R4@eth2\n vrf forwarding v1\n ipv4 address 3.3.3.1 255.255.255.252\n ipv6 address 3333::1 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\nserver telnet tel\n security protocol telnet\n exec timeout 10000000\n exec logging\n exec colorize prompt\n no exec authorization\n no login authentication\n login logging\n vrf v1\n exit\n!\nend\n</code></pre> <p><code>r4-hw.txt</code></p> <pre><code>int eth1 eth 0000.4444.0001 127.0.0.1 16021 127.0.0.1 16011\nint eth2 eth 0000.4444.0003 127.0.0.1 46013 127.0.0.1 46023\ntcp2vrf 2424 v1 23\n</code></pre> <p><code>r4-sw.txt</code></p> <pre><code>hostname R4\n!\nvrf definition v1\n rd 1:1\n exit\n!\nrouter lsrp4 1\n vrf v1\n router-id 10.4.4.4\n segrout 20 4\n redistribute connected\n exit\n!\nrouter lsrp6 1\n vrf v1\n router-id 10.6.4.4\n segrout 20 4\n redistribute connected\n exit\n!\ninterface template1\n no description\n lldp enable\n vrf forwarding v1\n ipv4 address dynamic dynamic\n polka enable 4 65536 20\n mpls enable\n router lsrp4 1 enable\n shutdown\n no log-link-change\n exit\n!\ninterface loopback0\n description lo R4\n vrf forwarding v1\n ipv4 address 20.20.20.4 255.255.255.255\n ipv6 address 2020::4 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet1\n description R4@eth1 --&gt; R1@eth1\n vrf forwarding v1\n ipv4 address 1.1.1.2 255.255.255.252\n ipv6 address 1111:1::2 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet2\n description R4@eth2 --&gt; R3@eth2\n vrf forwarding v1\n ipv4 address 3.3.3.2 255.255.255.252\n ipv6 address 3333::2 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\nserver telnet tel\n security protocol telnet\n exec timeout 10000000\n exec logging\n exec colorize prompt\n no exec authorization\n no login authentication\n login logging\n vrf v1\n exit\n!\nend\n</code></pre>"},{"location":"guides/getting-started/007-polka/#221-edge-nodes-routers-r5-r6","title":"2.2.1  Edge-Nodes-Routers <code>r5</code>, <code>r6</code>","text":"<p><code>r5-hw.txt</code></p> <pre><code>int eth1 eth 0000.1111.0001 127.0.0.1 16025 127.0.0.1 16015\ntcp2vrf 2525 v1 23\n</code></pre> <p><code>r5-sw.txt</code></p> <p><pre><code>hostname R5\n!\nvrf definition v1\n rd 1:1\n exit\n!\nrouter lsrp4 1\n vrf v1\n router-id 10.11.11.11\n segrout 20 11\n redistribute connected\n exit\n!\nrouter lsrp6 1\n vrf v1\n router-id 10.6.11.11\n segrout 20 11\n redistribute connected\n exit\n!\ninterface template1\n no description\n lldp enable\n vrf forwarding v1\n ipv4 address dynamic dynamic\n polka enable 11 65536 20\n mpls enable\n router lsrp4 1 enable\n shutdown\n no log-link-change\n exit\n!\ninterface loopback0\n description lo R5\n vrf forwarding v1\n ipv4 address 20.20.20.11 255.255.255.255\n ipv6 address 2020::11 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet1\n description R5@eth1 --&gt; R1@eth3\n vrf forwarding v1\n ipv4 address 11.11.11.1 255.255.255.252\n ipv6 address 1111::1 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface tunnel1\n description POLKA tunnel shortest ipv4 from R5 -&gt; R6\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 20.20.20.7\n tunnel domain-name 20.20.20.1 20.20.20.2\n tunnel mode polka\n vrf forwarding v1\n ipv4 address 30.30.30.1 255.255.255.252\n no shutdown\n no log-link-change\n exit\n!\ninterface tunnel2\n description POLKA tunnel longuest ipv4 from R5 -&gt; R6\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 20.20.20.7\n tunnel domain-name 20.20.20.1 20.20.20.4 20.20.20.3 20.20.20.2\n tunnel mode polka\n vrf forwarding v1\n ipv4 address 40.40.40.1 255.255.255.252\n no shutdown\n no log-link-change\n exit\n!\ninterface tunnel3\n description POLKA tunnel shortest ipv6 from R5 -&gt; R6\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 2020::7\n tunnel domain-name 2020::1 2020::2\n tunnel mode polka\n vrf forwarding v1\n ipv6 address 3030::1 ffff:ffff:ffff:ffff::\n no shutdown\n no log-link-change\n exit\n!\ninterface tunnel4\n description POLKA tunnel longues ipv6 from R5 -&gt; R6\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 2020::7\n tunnel domain-name 2020::1 2020::4 2020::3 2020::2\n tunnel mode polka\n vrf forwarding v1\n ipv6 address 4040::1 ffff:ffff:ffff:ffff::\n no shutdown\n no log-link-change\n exit\n!\n!\nserver telnet tel\n security protocol telnet\n exec timeout 10000000\n exec colorize prompt\n exec logging\n no exec authorization\n no login authentication\n login logging\n vrf v1\n exit\n!\nend\n</code></pre> <code>r6-hw.txt</code></p> <pre><code>int eth1 eth 0000.1717.0001 127.0.0.1 26021 127.0.0.1 26011\ntcp2vrf 2626 v1 23\n</code></pre> <p><code>r6-sw.txt</code></p> <pre><code>hostname R6\n!\nvrf definition v1\n rd 1:1\n exit\n!\nrouter lsrp4 1\n vrf v1\n router-id 10.7.7.7\n segrout 20 7\n redistribute connected\n exit\n!\nrouter lsrp6 1\n vrf v1\n router-id 10.6.7.7\n segrout 20 7\n redistribute connected\n exit\n!\ninterface template1\n no description\n lldp enable\n vrf forwarding v1\n ipv4 address dynamic dynamic\n polka enable 7 65536 20\n mpls enable\n router lsrp4 1 enable\n shutdown\n no log-link-change\n exit\n!\ninterface loopback0\n description lo R6\n vrf forwarding v1\n ipv4 address 20.20.20.7 255.255.255.255\n ipv6 address 2020::7 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface ethernet1\n description R6@eth1 -&gt; R2@eth1\n vrf forwarding v1\n ipv4 address 7.7.7.1 255.255.255.252\n ipv6 address 7777::1 ffff:ffff:ffff:ffff::\n template template1\n router lsrp6 1 enable\n no shutdown\n exit\n!\ninterface tunnel1\n description POLKA tunnel from R6 -&gt; R5\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 20.20.20.11\n tunnel domain-name 20.20.20.2 20.20.20.1\n tunnel mode polka\n vrf forwarding v1\n ipv4 address 30.30.30.2 255.255.255.252\n no shutdown\n no log-link-change\n exit\n!\ninterface tunnel2\n description POLKA tunnel longuest ipv4 from R6 -&gt; R5\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 20.20.20.11\n tunnel domain-name 20.20.20.2 20.20.20.3 20.20.20.4 20.20.20.1\n tunnel mode polka\n vrf forwarding v1\n ipv4 address 40.40.40.2 255.255.255.252\n no shutdown\n no log-link-change\n exit\n!\ninterface tunnel3\n description POLKA tunnel shortest ipv6 from R6 -&gt; R5\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 2020::11\n tunnel domain-name 2020::2 2020::1\n tunnel mode polka\n vrf forwarding v1\n ipv6 address 3030::2 ffff:ffff:ffff:ffff::\n no shutdown\n no log-link-change\n exit\n!\ninterface tunnel4\n description POLKA tunnel longues ipv6 from R6 -&gt; R5\n tunnel vrf v1\n tunnel source loopback0\n tunnel destination 2020::11\n tunnel domain-name 2020::2 2020::3 2020::4 2020::1\n tunnel mode polka\n vrf forwarding v1\n ipv6 address 4040::2 ffff:ffff:ffff:ffff::\n no shutdown\n no log-link-change\n exit\n!\nserver telnet tel\n security protocol telnet\n exec timeout 10000000\n exec logging\n exec colorize prompt\n no exec authorization\n no login authentication\n login logging\n vrf v1\n exit\n!\nend\n</code></pre>"},{"location":"guides/getting-started/007-polka/#3-verification","title":"3 Verification","text":""},{"location":"guides/getting-started/007-polka/#31-launch-all-nodes","title":"3.1 Launch all nodes","text":"<p>Run <code>r1</code>, <code>r2</code>, <code>r3</code>,<code>r4</code>, <code>r5</code>, <code>r6</code> in different terminal windows:</p> <ul> <li> <p>Run <code>r1</code> <code>java -jar rtr.jar routersc r1-hw.txt r1-sw.txt</code></p> </li> <li> <p>Run <code>r2</code> <code>java -jar rtr.jar routersc r2-hw.txt r2-sw.txt</code></p> </li> <li> <p>Run <code>r3</code> <code>java -jar rtr.jar routersc r3-hw.txt r3-sw.txt</code></p> </li> <li> <p>Run <code>r4</code> <code>java -jar rtr.jar routersc r4-hw.txt r4-sw.txt</code></p> </li> <li> <p>Run <code>r5</code> <code>java -jar rtr.jar routersc r5-hw.txt r5-sw.txt</code></p> </li> <li> <p>Run <code>r6</code> <code>java -jar rtr.jar routersc r6-hw.txt r6-sw.txt</code></p> </li> </ul>"},{"location":"guides/getting-started/007-polka/#or","title":"Or","text":"<p>Use <code>tmux</code> to run the entire topology in a single window. To install it on a Linux Debian-based like Ubuntu, use <code>apt install -y tmux</code>.</p> <p>Create a file <code>vi start.sh</code> <pre><code>#!/bin/bash\n\n# Copyright [2019-2022] Universidade Federal do Espirito Santo\n#                       Instituto Federal do Espirito Santo\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nRTR=/&lt;path freertr&gt;/rtr.jar\nHWSW=/&lt;path configuration files&gt;/\n\ntmux new-session -d -s rare 'java -jar '$RTR' routersc '$HWSW'r1-hw.txt '$HWSW'r1-sw.txt'\ntmux split-window -v -t 0 -p 50\ntmux send 'java -jar '$RTR' routersc '$HWSW'r2-hw.txt '$HWSW'r2-sw.txt' ENTER;\ntmux split-window -h -t 0 -p 50\ntmux send 'java -jar '$RTR' routersc '$HWSW'r3-hw.txt '$HWSW'r3-sw.txt' ENTER;\ntmux split-window -h -t 2 -p 50\ntmux send 'java -jar '$RTR' routersc '$HWSW'r4-hw.txt '$HWSW'r4-sw.txt' ENTER;\ntmux split-window -v -t 0 -p 50\ntmux send 'java -jar '$RTR' routersc '$HWSW'r5-hw.txt '$HWSW'r5-sw.txt' ENTER;\ntmux split-window -v -t 2 -p 50\ntmux send 'java -jar '$RTR' routersc '$HWSW'r6-hw.txt '$HWSW'r6-sw.txt' ENTER;\ntmux select-layout tiled\ntmux a;\n</code></pre></p>"},{"location":"guides/getting-started/007-polka/#32-access-by-telnet","title":"3.2 Access by Telnet","text":"<p>To access routers by telnet use <code>telnet &lt;ip address&gt; &lt;port&gt;</code>.</p> <p>For Example:</p> <p><code>telnet 127.0.0.1 2525</code></p>"},{"location":"guides/getting-started/007-polka/#33-verifying-the-tunnel-is-working-on-router-r5","title":"3.3 Verifying the tunnel is working on router r5","text":"<p><code>R5# Show interfaces summary</code></p> <p><pre><code>interface  state  tx     rx     drop\ntemplate1  admin  50     0      345\nloopback0  up     3273   0      0\nethernet1  up     17231  32368  0\nethernet2  up     5760   0      0\ntunnel1    up     330    0      0\ntunnel2    up     0      0      0\ntunnel3    up     460    0      0\ntunnel4    up     230    0      0\n</code></pre> If all tunnels are <code>up</code>, it's a good signal.</p> <p>For verification on router <code>R6</code>, just connect and set the commands above.</p>"},{"location":"guides/getting-started/007-polka/#33-testing-connectivity-between-r5-to-r6-using-polka","title":"3.3 Testing connectivity between <code>R5</code> to <code>R6</code> using PolKA","text":"<ul> <li>Shortest Path tunnel1 ipv4</li> </ul> <p><code>R5#ping 30.30.30.2 vrf v1</code> <pre><code>pinging 30.30.30.2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, sgt=0, flow=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/sum=0/0/3/8, ttl min/avg/max=255/255/255, tos min/avg/max=0/0/0\n</code></pre> </p> <ul> <li>Longest Path tunnel2 ipv4</li> </ul> <p><code>R5#ping 40.40.40.2 vrf v1</code> <pre><code>pinging 40.40.40.2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, sgt=0, flow=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/sum=3/4/6/23, ttl min/avg/max=255/255/255, tos min/avg/max=0/0/0\n</code></pre> </p> <ul> <li>Shortest Path tunnel3 ipv6</li> </ul> <p><code>R5#ping 3030::2 vrf v1</code> <pre><code>pinging 3030::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, sgt=0, flow=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/sum=0/0/1/2, ttl min/avg/max=255/255/255, tos min/avg/max=0/0/0\n</code></pre> </p> <ul> <li>Longest Path tunnel4 ipv6</li> </ul> <p><code>R5#ping 4040::2 vrf v1</code></p> <p><pre><code>pinging 4040::2, src=null, vrf=v1, cnt=5, len=64, tim=1000, gap=0, ttl=255, tos=0, sgt=0, flow=0, fill=0, sweep=false, multi=false, detail=false\n!!!!!\nresult=100%, recv/sent/lost/err=5/5/0/0, rtt min/avg/max/sum=0/0/0/2, ttl min/avg/max=255/255/255, tos min/avg/max=0/0/0\n</code></pre> </p>"},{"location":"guides/getting-started/007-polka/#34-visualizing-route-table","title":"3.4 Visualizing route table","text":"<ul> <li>Route table ipv4</li> </ul> <p><code>R5#show ipv4 route v1</code></p> <pre><code>typ  prefix          metric  iface      hop         time\nC    0.0.0.0/32      0/0     ethernet2  null        00:15:39\nL    1.1.1.0/30      70/10   ethernet1  11.11.11.2  00:15:29\nL    2.2.2.0/30      70/10   ethernet1  11.11.11.2  00:15:29\nL    3.3.3.0/30      70/20   ethernet1  11.11.11.2  00:15:29\nL    6.6.6.0/30      70/20   ethernet1  11.11.11.2  00:15:29\nL    7.7.7.0/30      70/20   ethernet1  11.11.11.2  00:15:29\nC    11.11.11.0/30   0/0     ethernet1  null        00:15:40\nLOC  11.11.11.1/32   0/1     ethernet1  null        00:15:40\nL    20.20.20.1/32   70/10   ethernet1  11.11.11.2  00:15:29\nL    20.20.20.2/32   70/20   ethernet1  11.11.11.2  00:15:29\nL    20.20.20.3/32   70/30   ethernet1  11.11.11.2  00:15:29\nL    20.20.20.4/32   70/20   ethernet1  11.11.11.2  00:15:29\nL    20.20.20.7/32   70/30   ethernet1  11.11.11.2  00:15:29\nC    20.20.20.11/32  0/0     loopback0  null        00:15:42\nC    30.30.30.0/30   0/0     tunnel1    null        00:15:29\nLOC  30.30.30.1/32   0/1     tunnel1    null        00:15:29\nC    40.40.40.0/30   0/0     tunnel2    null        00:15:29\nLOC  40.40.40.1/32   0/1     tunnel2    null        00:15:29\n</code></pre> <ul> <li>Route table ipv6</li> </ul> <p><code>R5#show ipv6 route v1</code></p> <pre><code>typ  prefix        metric  iface      hop      time\nC    1111::/64     0/0     ethernet1  null     00:18:17\nLOC  1111::1/128   0/1     ethernet1  null     00:18:17\nL    1111:1::/64   70/10   ethernet1  1111::2  00:18:05\nL    2020::1/128   70/10   ethernet1  1111::2  00:18:05\nL    2020::2/128   70/20   ethernet1  1111::2  00:18:05\nL    2020::3/128   70/30   ethernet1  1111::2  00:18:05\nL    2020::4/128   70/20   ethernet1  1111::2  00:18:05\nL    2020::7/128   70/30   ethernet1  1111::2  00:18:05\nC    2020::11/128  0/0     loopback0  null     00:18:19\nL    2222::/64     70/10   ethernet1  1111::2  00:18:05\nC    3030::/64     0/0     tunnel3    null     00:18:01\nLOC  3030::1/128   0/1     tunnel3    null     00:18:01\nL    3333::/64     70/20   ethernet1  1111::2  00:18:05\nC    4040::/64     0/0     tunnel4    null     00:18:01\nLOC  4040::1/128   0/1     tunnel4    null     00:18:01\nL    6666::/64     70/20   ethernet1  1111::2  00:18:05\nL    7777::/64     70/20   ethernet1  1111::2  00:18:05\n</code></pre>"},{"location":"guides/getting-started/007-polka/#34-visualizing-polka-routeid","title":"3.4 Visualizing PolKA routeid","text":"<ul> <li>Routeid Tunnel 1</li> </ul> <p><code>R5#show polka routeid tunnel1</code></p> <pre><code>mode  routeid\nhex   00 00 00 00 00 00 00 00 00 00 1c 59 b8 b1 a4 ea\npoly  111000101100110111000101100011010010011101010\n</code></pre> <ul> <li>Routeid Tunnel 2</li> </ul> <p><code>R5#show polka routeid tunnel2</code></p> <pre><code>mode  routeid\nhex   00 00 00 00 00 00 41 3b fd 39 6d 38 a0 07 71 39\npoly  1000001001110111111110100111001011011010011100010100000000001110111000100111001\n</code></pre>"},{"location":"guides/getting-started/007-polka/#35-tested-on","title":"3.5 Tested on","text":"<p>These configurations have been tested on the following operating systems: MacOS Monterey 12.2 and Ubuntu 21.04</p>"},{"location":"guides/getting-started/007-polka/#4-conclusion","title":"4 Conclusion","text":"<p>This section demonstrated:</p> <ul> <li>How to launch many automated routers with bash script using tmux</li> <li>How to use a template interface on freertr</li> <li>How to enable PolKA in a square topology</li> <li>How to create PolKA tunnels</li> <li>How to verify connectivity</li> </ul> <p>You learned how to enable PolKA protocol using FreeRouter tunnels. You also learned how to use Link-state Routing Protocol (LSRP).</p>"},{"location":"guides/getting-started/007-polka/#5-references","title":"5 References:","text":"<p>https://ieeexplore.ieee.org/document/9165501</p> <p>https://github.com/nerds-ufes/polka</p> <p>http://www.freertr.org/</p> <p>https://github.com/eversonscherrer/freertr/tree/main/polKa</p> <p>https://github.com/eversonscherrer/dissector-polka</p>"},{"location":"guides/igp-monitoring/","title":"a way to get rid of snmp - part 1, the igp monitoring","text":"<p>The link state igp protocols flood the complete topology description in lsa/lsp packets so all the routers in a given area/level have the same view. It also means that if you have a box that can report the whole topology, it's unnecessary to bother all the other boxes about these questions. For it to work, it's necessary to have the show outputs formatted for machine processing, moreover the known good topology also need to be fixed. And exactly this is what rare/freerouter could do: once you set up your igp peering, you just define that which show commands you would monitor, and train these to the current state. Afterwards, you point your monitoring tools to the box and that's it: once the topology changes, the shows will output something different what it produced when you trained them and it'll generate an alert and tell you the difference. Here are some configs from the geant p4 testbed: in this case the monitoring pointed exclusively to the bud0001 node and it easily reports about the ams0001 peerings:</p> <p> Acknowledging the changes in the network is also as easy as issuing the train command again: <pre><code>BUD0001#configure\nBUD0001(cfg)#check ospfv4-10.1.1.1\nBUD0001(cfg-check)#show running-config this\ncheck ospfv4-10.1.1.1\n command sho ipv4 ospf 1 topo 0 10.1.1.1\n template ospf4temp\n require-text category;value;addition\n require-text node;10.1.1.1;\n require-text name;AMS0001;\n require-text stub;false;\n require-text connections;4;\n require-text prefixes;0 1 0 0;\n require-text neighbor;FRA0001;10 10.1.12.1\n require-text neighbor;PAR0101;10 10.1.110.1\n require-text neighbor;TCD0021;10 10.12.14.1\n require-text neighbor;CHI0041;10 10.30.68.1\n require-text addprefix;10.1.1.1/32;10\n exit\n!\n\nBUD0001(cfg-check)#train\nBUD0001(cfg-check)#show config-differences\ncheck ospfv4-10.1.1.1\n no require-text neighbor;TCD0021;10 10.12.14.1\n no require-text connections;4;\n require-text connections;5;\n require-text neighbor;POZ0001;10 10.1.14.1\n require-text neighbor;PAR0001;10 10.22.0.1\n exit\n\nBUD0001(cfg-check)#\n</code></pre></p> <p>Afterwards, that topology info is written in the config again, so changes to the current state will be alerted. the results could be taken away by a wide variety of monitoring protocols, including nrpe, prometheus, netconf, restapi, streaming telemetry, and so on.</p>"},{"location":"guides/installation/","title":"RARE/freeRtr installation","text":"<p>This section lists RARE/freeRtr routing platform possible installations. There multiple ways to achieve that. You can install every components in the same hardware similar to traditional router design, or even opt for a totally disaggregated model where all components are in different hardware and or virtual environment.</p> <p>These components are:</p> <ul> <li>freeRtr control plane software</li> <li>target dataplane software</li> <li>RARE interface software</li> </ul> <p>While the control plane software and RARE interface can be deployed using a VM or container, the dataplane software installation will be vendor dependant. For example, if you implement RARE/freeRtr platform instance on INTEL/TOFINO P4 switch you'd have to follow INTEL's hardware installation guide and perform the dataplane software installation on a platform powered by P4 TOFINO ASIC.</p> <p>In order to guarantee the best user experience, we strongly feel that the first encounter with a software is critical. Thus this section will expose ONLY simple procedure in order to provide:</p> <ul> <li>an effortless installation</li> <li>the best Open source router experience</li> </ul> <p>Note</p> <p>Should you need mode information regarding a distributed installation approach, don't hesitate to engage with us via RARE/freeRtr mailing. Contact infornation can be found here</p> <p>This article and this article can also help you understand how RARE/freeRtr can be deployed via a complete disaggregated model.</p> <p>Info</p> <p>As a result, the following instllation guide will be restricted to popular platform. However, RARE/freeRtr by nature aims to be available on a variety of platform in a long term perspective. Therefore, expect additonal guides !</p> <p>Happy networking !</p>"},{"location":"guides/installation/wedge100bf32/interface/","title":"Interface configuration on Wedge 100BF-32","text":"<p>This section describes how to configure interface via RARE/freeRtr OS. Interfaces can be seen from 3 perspectives:</p> <ul> <li>Front panel</li> <li>INTEL/TOFINO ASIC</li> <li>freeRtr</li> </ul>"},{"location":"guides/installation/wedge100bf32/interface/#front-panel","title":"Front panel","text":"<p>On Wedge100bf32, all ports are accessible via the switch front panel. Actually, all QSFP28 ports are labelled and are visually identified by an index that belongs to [1..32] range. All ports are able to run at 10/25/40/100GE speeds. Each QSFP28 port has also 4 lanes. It is also possible for each port to provide 4x10GE, 4x25GE, and maybe 2x40GE interfaces using a breakout cable.</p> <p>Therefore each port/lane will have the following identifier: <code>$FRONT_PANEL_PORT/$LANE</code></p> <p>For example, if you have a 4x25GE breakout cable inserted in <code>FRONT PANEL PORT 1</code>, the interfaces will be identified as follow:</p> <p><code>FRONT PANEL 15/0, 15/1,15/2, 15/3</code>.</p>"},{"location":"guides/installation/wedge100bf32/interface/#inteltofino-asic","title":"INTEL/TOFINO ASIC","text":"<p>Internally, INTEL/TOFINO ASIC allocates to each interface (i.e <code>$PORT/$LANE</code> pair) a specific identifier. The output from <code>bf_shell</code> utility below shows an example of interface mapping.</p> <pre><code>-----+----+---+----+-------+----+--+--+---+---+---+--------+----------------+----------------+-\nPORT |MAC |D_P|P/PT|SPEED  |FEC |AN|KR|RDY|ADM|OPR|LPBK    |FRAMES RX       |FRAMES TX       |E\n-----+----+---+----+-------+----+--+--+---+---+---+--------+----------------+----------------+-\n1/0  |23/0|132|3/ 4|10G    |NONE|Au|Au|YES|ENB|UP |  NONE  |           55055|           55154|\n1/1  |23/1|133|3/ 5|-------|----|--|--|YES|---|---|--------|----------------|----------------|-\n1/2  |23/2|134|3/ 6|-------|----|--|--|YES|---|---|--------|----------------|----------------|-\n1/3  |23/3|135|3/ 7|-------|----|--|--|YES|---|---|--------|----------------|----------------|-\n</code></pre> <p>Note</p> <p>The output above is just for information. Practically you would never have to run <code>bf_shell</code> in order to retrieve this mapping between front panel interface and TOFINO identifier</p>"},{"location":"guides/installation/wedge100bf32/interface/#freertr","title":"freeRtr","text":"<p>freeRtr identifies dataplane port as <code>sdn&lt;index&gt;</code> interface. <code>&lt;index&gt;</code> is an integer.</p> <p>Note</p> <p>As a rule of thumb, when no breakout cable is used, <code>&lt;index&gt;</code> is the <code>front panel</code> port identifier: <code>&lt;fp_port_id&gt;</code>. If a breakout cable is used <code>&lt;index&gt;</code> can be the concatenation of [<code>&lt;fp_port_id&gt;</code> &amp; <code>00</code> &amp; <code>&lt;lane_id&gt;</code>]</p> <p>For example, if a module is inserted into front panel port <code>1</code>, then freeRtr interface name is interface <code>sdn1</code>. If a 4x25GE breakout cable is plugged into port <code>1</code>, then interface name should be: interface <code>sdn1001</code>, <code>sdn1002</code>,<code>sdn1003</code>, <code>sdn1004</code></p>"},{"location":"guides/installation/wedge100bf32/interface/#interface-configuration","title":"Interface configuration","text":"<p>In freeRtr philosophy, each interface belongs to either a <code>vrf</code> or a <code>bridge</code>. It is therefore mandatory:</p> <ul> <li>to configure a <code>vrf</code> or a <code>bridge</code> <pre><code>vrf definition &lt;MY_VRF&gt;\n exit\n</code></pre> <pre><code>bridge &lt;BRIDGE_ID&gt;\n mac-learn\n exit\n</code></pre></li> <li> <p>and bind each of them to an interface. <pre><code>conf t\ninterface sdn1\n vrf forwarding  &lt;MY_VRF_ID&gt;\n exit\nend\n</code></pre> <pre><code>conf t\ninterface sdn2\n bridge-group &lt;MY_BRIDGE_ID&gt;\n exit\nend\n</code></pre></p> </li> <li> <p>Declare <code>vrf</code> or <code>bridge</code> and interfaces at the dataplane level <pre><code>server p4lang &lt;SERVER_P4_ID&gt;\n export-vrf &lt;MY_VRF_ID&gt; 1\n export-bridge &lt;MY_BRIDGE_ID&gt; 1\n export-port sdn1 132 100 0 0 0\n export-port sdn2 140 100 0 0 0\n exit\nend\n</code></pre></p> </li> </ul>"},{"location":"guides/installation/wedge100bf32/interface/#explanation","title":"Explanation","text":"<p>The above example describe the configuration of front panel port <code>1</code> and <code>2</code>.</p> <ul> <li>Front panel port <code>1</code> (sdn<code>1</code>) is bound to <code>vrf</code> <code>&lt;MY_VRF_ID&gt;</code></li> <li>Front panel port <code>2</code> (sdn<code>2</code>) is bound to <code>bridge</code> <code>&lt;MY_VRF_ID&gt;</code></li> </ul> <p>The interesting part is <code>server p4lang p4</code> configuration stanza</p> <ul> <li> <p>export-vrf <code>&lt;MY_VRF_ID&gt;</code> <code>&lt;DATAPLANE_VRF_ID&gt;</code></p> <ul> <li><code>&lt;MY_VRF_ID&gt;</code> let's assign a value: <code>my_vrf</code></li> <li><code>&lt;DATAPLANE_VRF_ID&gt;</code> let's assign a value: <code>1</code></li> </ul> </li> <li> <p>export-bridge <code>&lt;MY_BRIDGE_ID&gt;</code> <code>DATAPLANE_BRIDGE_ID</code></p> <ul> <li><code>&lt;MY_BRIDGE_ID&gt;</code> let's assign a value: <code>1</code></li> <li><code>&lt;DATAPLANE_BRIDGE_ID&gt;</code> let's assign a value: <code>1</code></li> </ul> </li> <li> <p>export-port <code>&lt;FREERTR_INTF&gt;</code> <code>&lt;TOFINO_PORT_ID&gt;</code> <code>&lt;PORT_SPEED&gt;</code> <code>&lt;FEC&gt;</code> <code>AUTONEG</code> <code>&lt;FLOWCTRL&gt;</code></p> <ul> <li><code>&lt;FREERTR_INTF&gt;</code>: freeRtr <code>sdn</code> interface identifier</li> <li><code>&lt;TOFINO_PORT_ID&gt;</code>: INTEL/TOFINO ASIC port identifier</li> <li><code>&lt;PORT_SPEED&gt;</code>: Port speed <code>10</code>/<code>25</code>/<code>40</code>/<code>100</code> GE</li> <li><code>&lt;FEC&gt;</code>: Forwarding Error Correction in use [<code>0</code>=UNDEFINED, <code>1</code>=NONE, <code>2</code>=FC, <code>3</code>=RS]</li> <li><code>&lt;AUTONEG&gt;</code>: Autonegotiation [<code>0</code>=UNDEFINED, <code>1</code>=OFF, <code>2</code>=ON]</li> <li><code>&lt;FLOWCTRL&gt;</code>: Flow control type [<code>0</code>=UNDEFINED, <code>1</code>=NONE, <code>2</code>=PAUSE, <code>3</code>=PFC]</li> </ul> </li> </ul> <p>Note</p> <p>In the above example <code>&lt;TOFINO_PORT_ID&gt;</code> for front panel port 1 has value <code>132</code>.</p> <p>How do we get this value without <code>bf_shell</code> ?</p> <ul> <li>2 possibilities:</li> </ul> <p><code>-1-</code> <code>show p4lang &lt;SERVER_P4_ID&gt;</code> <pre><code>FREERTR# show p4lang p4\n...\nfront  name\n...\n132    frontpanel-1/0\n133    frontpanel-1/1\n134    frontpanel-1/2\n135    frontpanel-1/3\n...\n140    frontpanel-2/0\n141    frontpanel-2/1\n142    frontpanel-2/2\n143    frontpanel-2/3\n...\n</code></pre> <code>-2-</code> Use freeRtr configuration auto-completion <pre><code>conf t\nFREERTR(cfg)#server p4lang p4\nFREERTR(cfg-server)#export-port sdn4 ?\n  &lt;num&gt;           - port number\n  dynamic         - dynamic port number\n  frontpanel-1/0  - port number\n  frontpanel-1/1  - port number\n  frontpanel-1/2  - port number\n  frontpanel-1/3  - port number\n...\n</code></pre> If <code>-2-</code> is used then <code>frontpanel-1/0</code> will be translated to its corresponding TOFINO identifier (i.e <code>132</code>).</p> <p>The final configuration is:</p> <pre><code>conf t\n!\nvrf definition my_vrf\n exit\n!\nbridge 1\n mac-learn\n exit\n!\ninterface sdn1\n vrf forwarding my_vrf\n exit\n!\ninterface sdn2\n bridge-group 1\n exit\n!\nserver p4lang p4\n export-vrf my_vrf 1\n export-bridge 1 1\n export-port sdn1 132 100 0 0 0\n export-port sdn2 140 100 0 0 0\n exit\n!\nend\n</code></pre>"},{"location":"guides/installation/wedge100bf32/onie-nos-install/","title":"Installation on Wedge\u00a0100BF-32(X or QS)","text":""},{"location":"guides/installation/wedge100bf32/onie-nos-install/#3-major-steps","title":"3 major steps","text":"<ul> <li>Check prerequisites</li> <li>Boot into the ONIE environment</li> <li>Install the RARE/freeRtr NOS image via ONIE</li> </ul> <p>Info</p> <p>Assuming you are familiar with ONIE, the installation process should take about five minutes.</p>"},{"location":"guides/installation/wedge100bf32/onie-nos-install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Wedge\u00a0100BF-32 hardware with ONIE partition pre-installed<ul> <li>Wedge\u00a0100BF-32X</li> <li>Wedge\u00a0100BF-32QS</li> </ul> </li> </ul> <p>Info</p> <p>Wedge\u00a0100BF-32X and Wedge\u00a0100BF-32QS are very similar platforms. They both have 32 QSFP28 ports able to run at 10/25/40/100GE line rate. The first is equipped with the Intel Tofino T32D ASIC model with two pipelines (or cores if it helps to picture the difference). The latter is powered by the Intel Tofino T32Q ASIC which has 4 pipelines. Each pipeline is able to handle 16 interface ports. The Wedge\u00a0100BF-32QS has 2 additional pipes that are not tied to specific front panel ports. They can be leveraged to provide additional stages for packet processing.</p> <ul> <li>DHCP server that serves IP addresses to<ul> <li>the BMC</li> <li>and the Main Board CPU (or MBC): Where the Network Operating System will be effectively installed</li> </ul> </li> </ul> <p>Note</p> <p>If you can access the BMC through the Wedge\u00a0100BF-32 serial console, the DHCP server and Internet connectivity are optional. However, the installation process requires at least IP connectivity and that you can get SSH access to Main Board CPU. Connectivity to MBC will have to be enabled from BMC.</p> <ul> <li>Wedge\u00a0100BF-32 BMC access either<ul> <li>via serial console port</li> <li>or via BMC SSH</li> </ul> </li> </ul> <p>Note</p> <p>Please refer to EdgeCore documentation regarding BMC and MBC access procedure.</p>"},{"location":"guides/installation/wedge100bf32/onie-nos-install/#boot-into-onie-environment","title":"Boot into ONIE environment","text":"<ul> <li>Access the BMC via Serial or SSH <pre><code>ssh root@&lt;bmc_ip&gt;\nroot@&lt;bmc_ip&gt;'s password:\nLast login: Sun Mar  8 07:18:41 2020 from 172.16.11.11\nroot@bmc:~#\n</code></pre> (use your favorite search engine in order to retrieve BMC default password)</li> <li> <p>Power cycle MBC <pre><code>wedge_power.sh reset\n</code></pre></p> </li> <li> <p>Access the MBC from BMC <pre><code>root@bmc:~# sol.sh\nYou are in SOL session.\nUse ctrl-x to quit.\n-----------------------\n\n...\n&lt;BMC boot messages&gt;\n...\n&lt;wait for Grub menu to appear&gt;\n...\n</code></pre></p> </li> <li> <p>Choose <code>ONIE rescue mode</code> from Grub menu</p> </li> </ul>"},{"location":"guides/installation/wedge100bf32/onie-nos-install/#rarefreertr-nos-image-installation-via-onie","title":"RARE/freeRtr NOS image installation via ONIE","text":"<p>Now that you have rebooted MBC into <code>ONIE rescue mode</code>, there are 2 possible ways to install RARE/freeRtrt NOS:</p> <ul> <li> <p>Internet access is available from MBC</p> <ul> <li>Launch RARE/freeRtr ONIE net-install <pre><code>root@bmc:~# onie-nos-install http://hydra.nix.net.switch.ch/RARE/releases/1/onie-installer.bin\n</code></pre></li> </ul> </li> <li> <p>WEDGE MBC air gapped installation</p> <ul> <li>From a computer that has Internet connectivity <pre><code>wget http://hydra.nix.net.switch.ch/RARE/releases/1/onie-installer.bin\n</code></pre></li> <li>Copy RARE/freeRtr ONIE installer to MBC <pre><code>scp ./onie-installer.bin root@&lt;mbc_ip&gt;:~/\n</code></pre></li> <li>Log into the P4 switch either using BMC serial or SSH <pre><code>ssh root@&lt;mbc_ip&gt;\n</code></pre></li> <li>Launch RARE/freeRtr ONIE install from local file system <pre><code>onie# onie-nos-install /root/onie-installer.bin\n</code></pre> You should observe RARE/freeRtr installation work in progress. Once finished, the Wedge\u00a0100BF-32 will reboot.</li> </ul> </li> </ul> <p>And, \u00abvoil\u00e0 !\u00bb</p> <p>Congratulations, you have just installed RARE/freeRtr on your Wedge\u00a0100BF-32!</p> <p>Happy networking!</p>"},{"location":"guides/installation/wedge100bf32/rare-hcl/","title":"RARE P4 TOFINO Hardware Compatibility List","text":"<p>RARE ONIE image can be installated on multiple TOFINO based P4 switch models. The following section describes RARE installation on Wedge 100BF-32X. However, keep in mind that the image is compatible with multiple TOFINO based hardware models.</p> <p>These hardwares are:</p> Hardware Vendor Wedge 100BF-32X  EdgeCore Wedge 100BF-32QS  EdgeCore Wedge 100BF-65X  EdgeCore Wedge 100BF-32QS  EdgeCore AS9516-32D  EdgeCore BF2556X-1T Stordis BF6064X-T  Stordis Aurora 710  Netberg D7064Q  (partial) Inventec X312P-48Y-T  AsterFusion"},{"location":"guides/installation/wedge100bf32/rare-nos-exp-upgrade/","title":"RARE NOS experimental software installation","text":"<p>This command will install latest commit from freeRtr <code>master</code> branch</p> <p>Tip</p> <p>This command is particularly suitable for lab or development environment where it is necessary for testing purpose, to install latest commit from freeRtr <code>master</code> branch.</p>"},{"location":"guides/installation/wedge100bf32/rare-nos-exp-upgrade/#experimental-software-install","title":"Experimental software install","text":"<pre><code>FREERTR#tna-install-experimental\nchild 369223 created on 3\nchild started\nINFO: Installing the latest commit of freertr (7730f95d261c1b3c6ffd29698ad5bf722a578b40) on top of the latest RARE development version\nWARNING: this could lead to a failed build or a non-functional application\n\nINFO: Fetching 7730f95d261c1b3c6ffd29698ad5bf722a578b40 from https://github.com/rare-freertr/freeRtr\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100 2246k    0 2246k    0     0  2308k      0 --:--:-- --:--:-- --:--:-- 5656k\nINFO: Fetching origin/master from https://bitbucket.software.geant.org/scm/rare/rare-nix.git\nInitialized empty Git repository in /tmp/tmp.dVOIcyH9Xn/.git/\nremote: Counting objects: 970, done.\nremote: Compressing objects: 100% (910/910), done.\nremote: Total 970 (delta 547), reused 0 (delta 0)\nReceiving objects: 100% (970/970), 20.81 MiB | 31.39 MiB/s, done.\nResolving deltas: 100% (547/547), done.\nFrom https://bitbucket.software.geant.org/scm/rare/rare-nix\n * [new branch]      1          -&gt; origin/1\n * [new branch]      CERN       -&gt; origin/CERN\n * [new branch]      inventec   -&gt; origin/inventec\n * [new branch]      master     -&gt; origin/master\n * [new branch]      nightly    -&gt; origin/nightly\n * [new branch]      release-ng -&gt; origin/release-ng\n * [new tag]         release-1  -&gt; release-1\nHEAD is now at 2bfa4f4 Make freerouter service less Debian-dependent\ncopying path '/nix/store/v5l53fy60402r42yi8lam2s50wd7lhms-hook' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/f95jkch26wxmqd076bcm976qrn7ml46i-stdenv-linux' from 'https://cache.nixos.org'...\ncopying path '/nix/store/h128b1jcvqh3g6l78c1s0jwdmm0wwj1a-openjdk-headless-14.0.2-ga' from 'https://cache.nixos.org'...\ncopying path '/nix/store/9y454xgn2s4x2gkirxba034sv9draci5-zip-3.0' from 'https://cache.nixos.org'...\nbuilding '/nix/store/38ivdpkymwb2080y8rmlfyndsfv9jrqc-freerouter-jar-experimental.drv'...\nunpacking sources\nunpacking source archive /nix/store/iv8h1xjykdl45868grgl0w0b6kbkjiin-tmp.MmBRW6czdM\nsource root is tmp.MmBRW6czdM\npatching sources\nconfiguring\nno configure script, doing nothing\nbuilding\n/build/tmp.MmBRW6czdM/src /build/tmp.MmBRW6czdM\ncompiling\nwarning: [options] system modules path not set in conjunction with -source 11\n1 warning\npacking\n/build/tmp.MmBRW6czdM\ninstalling\npost-installation fixup\nshrinking RPATHs of ELF executables and libraries in /nix/store/rw3nm56z0fk6q4fqw9b1imqvpwg5y6w6-freerouter-jar-experimental\nstrip is /nix/store/b10shv9yqbgps47y0n8x7l7bq8fmp1i6-binutils-2.31.1/bin/strip\npatching script interpreter paths in /nix/store/rw3nm56z0fk6q4fqw9b1imqvpwg5y6w6-freerouter-jar-experimental\nchecking for references to /build/ in /nix/store/rw3nm56z0fk6q4fqw9b1imqvpwg5y6w6-freerouter-jar-experimental...\nbuilding '/nix/store/kdxrw8z02h1kk8cfbqb1y4p8wrqin9lw-freerouter-java-modules.drv'...\nthese derivations will be built:\n  /nix/store/q6f7yzmc009idn54rcgvfz79fmlbpqkc-freerouter-experimental.drv\n  /nix/store/ymmh46xnarix2qqwkjflypw5r458bnal-unit-freerouter.service.drv\n  /nix/store/05m1lrvqmv8901pws2iama0g2d84g1zx-freerouter.service.drv\nthese paths will be fetched (0.00 MiB download, 0.01 MiB unpacked):\n  /nix/store/d868fmvgpz2bdmfdq02il1flsr1bngs7-hook\n  /nix/store/rrfvfy731gzz0qfglmmp6qmnxhsk6w95-hook\ncopying path '/nix/store/rrfvfy731gzz0qfglmmp6qmnxhsk6w95-hook' from 'https://cache.nixos.org'...\ncopying path '/nix/store/d868fmvgpz2bdmfdq02il1flsr1bngs7-hook' from 'https://cache.nixos.org'...\nbuilding '/nix/store/q6f7yzmc009idn54rcgvfz79fmlbpqkc-freerouter-experimental.drv'...\ninstalling\nbuilding '/nix/store/ymmh46xnarix2qqwkjflypw5r458bnal-unit-freerouter.service.drv'...\nbuilding '/nix/store/05m1lrvqmv8901pws2iama0g2d84g1zx-freerouter.service.drv'...\nbuilding '/nix/store/h1c98g6rfffccb0wiy78ngxx71gvlnxa-user-environment.drv'...\ncreated 113 symlinks in user environment\nINFO: Use \"release-manager --switch-to-generation 12\" to switch to the new release\n\nprocess exited with 0 code\n</code></pre>"},{"location":"guides/installation/wedge100bf32/rare-nos-exp-upgrade/#local-installation-check","title":"Local installation check","text":"<pre><code>FREERTR#tna-list-long-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:40:44.578216971 +0100\n         2         1theta  release-1eta-22-gd8500e6   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:48:02.029248582 +0100\n         3         1theta  release-1eta-27-g5f056c0   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-27 23:57:46.691496126 +0200\n         4         1theta  release-1eta-32-g4fb2381   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:51:53.773985464 +0200\n         5         1theta  release-1eta-33-ge6051d4   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:55:48.397095140 +0200\n         7         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:27:50.621246733 +0200\n         8         1theta  release-1eta-57-g176c15e   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-09 11:28:20.630407955 +0200\n         9         1       release-1theta-2-g9070f76  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-17 07:40:01.283988320 +0200\n        10         2       release-1-4-ge7e281d       Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 11:08:51.218083155 +0200\n        11 *       1       release-1                  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 12:39:00.163811926 +0200\n        12         2       release-1-5-g2bfa4f4-freertr-7730f9 Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 15:26:08.879322614 +0200\n</code></pre> <p>Tip</p> <p>A new generation <code>12</code> has been created and has a special name encompassing RARE-NIX and freeRtr short commit (respectively <code>g2bfa4f4</code> and <code>7730f9</code>)</p>"},{"location":"guides/installation/wedge100bf32/rare-nos-exp-upgrade/#switch-to-new-software-release","title":"Switch to new software release","text":"<pre><code>FREERTR#tna-switch-to-generation 12\nchild 371503 created on 3\nchild started\nSet RARE profile generation to 12 and restart freerouter? [y/n] y\nprocess exited with 0 code\nConnection closed by foreign host.\n</code></pre> <p>Check software locally installed</p> <pre><code>FREERTR#tna-list-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:40:44.578216971 +0100\n         2         1theta  release-1eta-22-gd8500e6   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:48:02.029248582 +0100\n         3         1theta  release-1eta-27-g5f056c0   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-27 23:57:46.691496126 +0200\n         4         1theta  release-1eta-32-g4fb2381   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:51:53.773985464 +0200\n         5         1theta  release-1eta-33-ge6051d4   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:55:48.397095140 +0200\n         7         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:27:50.621246733 +0200\n         8         1theta  release-1eta-57-g176c15e   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-09 11:28:20.630407955 +0200\n         9         1       release-1theta-2-g9070f76  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-17 07:40:01.283988320 +0200\n        10         2       release-1-4-ge7e281d       Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 11:08:51.218083155 +0200\n        11         1       release-1                  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 12:39:00.163811926 +0200\n        12 *       2       release-1-5-g2bfa4f4-freer Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 15:26:08.879322614 +0200\n</code></pre> <p>Check freeRtr version in use</p> <pre><code>FREERTR#show platform\nfreeRouter v22.5.3-cur, done by cs@nop.\n\nname: FREERTR\nhwid: accton_wedge100bf_32x\nhwsn: null\nuptime: since 2022-05-03 17:51:05, for 00:00:21\nreload: code#3=user requested\nrwpath: /etc/freertr/\nhwcfg: /etc/freertr/rtr-hw.txt\nswcfg: /etc/freertr/rtr-sw.txt\ncpu: 8*amd64\nmem: free=299m, max=2147m, used=351m\nhost: Linux v5.10.0-8-amd64\njava: N/A v14.0.2-internal @ /nix/store/7yx2ng37byikwxf4a2b08aqkjp23r2zc-openjdk-headless-14.0.2-ga-minimal-jre\njspec: Oracle Corporation (Java Platform API Specification) v14\nvm: Oracle Corporation (OpenJDK 64-Bit Server VM) v14.0.2-internal+0-adhoc..jdk14u-jdk-14.0.2-ga\nvmspec: Oracle Corporation (Java Virtual Machine Specification) v14\nclass: v58.0 @ /nix/store/rw3nm56z0fk6q4fqw9b1imqvpwg5y6w6-freerouter-jar-experimental/rtr.jar\n</code></pre>"},{"location":"guides/installation/wedge100bf32/rare-nos-lcm-cli/","title":"Software operation CLI on Wedge 100BF-32","text":"<p>Each software operation command starts with <code>tna</code> prefix. From RARE/freeRtr CLI:</p> <pre><code>FREERTR#tna-?\n  tna-bfshell              - Start bfshell\n  tna-cleanup              - Permanently remove unused packages\n  tna-install-experimental - Install the latest commit of freerouter on top of the latest RARE development version\n  tna-install-git          - Install the version from a specific Git commit\n  tna-install-latest       - Install the latest RARE development version\n  tna-install-release      - Install the specified release\n  tna-list-available       - List all available releases\n  tna-list-installed       - List all currently installed releases\n  tna-list-long-installed  - List all currently installed releases with non-abbreviated Git tags\n  tna-list-profiles        - List the available p4 profiles\n  tna-set-profile          - Set the p4 profile and restart the data-plane processes\n  tna-switch-to-generation - Select the RARE profile generation to activate and restart freerouter\n  tna-uninstall-generation - Delete the specified generation, use tna-cleanup to permanently remove packages\n  tna-update-release       - Install the latest update of the specified release\n</code></pre>"},{"location":"guides/installation/wedge100bf32/rare-nos-rel-upgrade/","title":"RARE NOS release upgrade on Wedge 100BF-32(X or QS)","text":"<pre><code>FREERTR#tna-update-release 1\nchild 365039 created on 3\nchild started\nINFO: Checking for release tags of https://bitbucket.software.geant.org/scm/rare/rare-nix.git\nINFO: Fetching c21fc88ae721207b45081073400d7ddc49fa05b8 from https://bitbucket.software.geant.org/scm/rare/rare-nix.git\nInitialized empty Git repository in /tmp/tmp.oMrSEPbvVa/.git/\nremote: Counting objects: 970, done.\nremote: Compressing objects: 100% (910/910), done.\nremote: Total 970 (delta 547), reused 0 (delta 0)\nReceiving objects: 100% (970/970), 20.81 MiB | 33.62 MiB/s, done.\nResolving deltas: 100% (547/547), done.\nFrom https://bitbucket.software.geant.org/scm/rare/rare-nix\n * [new branch]      1          -&gt; origin/1\n * [new branch]      1alpha     -&gt; origin/1alpha\n * [new branch]      1beta      -&gt; origin/1beta\n * [new branch]      1delta     -&gt; origin/1delta\n * [new branch]      1epsilon   -&gt; origin/1epsilon\n * [new branch]      1eta       -&gt; origin/1eta\n * [new branch]      1gamma     -&gt; origin/1gamma\n * [new branch]      1theta     -&gt; origin/1theta\n * [new branch]      1zeta      -&gt; origin/1zeta\n * [new branch]      CERN       -&gt; origin/CERN\n * [new branch]      hotfix/jordi-sde_9_5_0_hash_fix -&gt; origin/hotfix/jordi-sde_9_5_0_hash_fix\n * [new branch]      inventec   -&gt; origin/inventec\n * [new branch]      master     -&gt; origin/master\n * [new branch]      nightly    -&gt; origin/nightly\n * [new branch]      release-ng -&gt; origin/release-ng\n * [new tag]         release-1  -&gt; release-1\nHEAD is now at c21fc88 Bump version of bf-sde-nixpkgs to 3434a2\ncopying path '/nix/store/2i5lj8gcjg68qxl4cglinnkci6wxsjj5-freerouter-jar-22.4.23' from 'http://p4.cache.nix.net.switch.ch'...\nbuilding '/nix/store/g5h810qg9xs1dsr67x2ll0hnq44zpnfz-freerouter-java-modules.drv'...\nthese paths will be fetched (0.00 MiB download, 0.74 MiB unpacked):\n  /nix/store/1ix3kvy4v9vr9l31isv750kyq1sgfrr9-freertr-exec-stop-post\n  /nix/store/3hhq1il3am1ly12b91ic41idpfywsig1-rtr-hw.txt\n  /nix/store/50wh9p15nlqbg3mc7snfhnmzhmi12lw6-release-manager-1\n  /nix/store/9g0kd84y36vzg3q6fbhvlgalpchbyi8z-freerouter-native-22.4.23\n  /nix/store/m3xbfn478kbkmfr36jw9gbcnazzqp1jc-freerouter.service\n  /nix/store/pxarww4k4a66m5dlycabmpqrj527am81-RARE-scripts\n  /nix/store/rs3l4jpil434n9zsc6cqn9rcfjw8s8pn-freertr-switch-gen\n  /nix/store/zr8vx2nj0yv1nn2qvhxa4sd3yynvby1b-freerouter-22.4.23\ncopying path '/nix/store/zr8vx2nj0yv1nn2qvhxa4sd3yynvby1b-freerouter-22.4.23' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/9g0kd84y36vzg3q6fbhvlgalpchbyi8z-freerouter-native-22.4.23' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/50wh9p15nlqbg3mc7snfhnmzhmi12lw6-release-manager-1' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/pxarww4k4a66m5dlycabmpqrj527am81-RARE-scripts' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/rs3l4jpil434n9zsc6cqn9rcfjw8s8pn-freertr-switch-gen' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/3hhq1il3am1ly12b91ic41idpfywsig1-rtr-hw.txt' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/1ix3kvy4v9vr9l31isv750kyq1sgfrr9-freertr-exec-stop-post' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/m3xbfn478kbkmfr36jw9gbcnazzqp1jc-freerouter.service' from 'http://p4.cache.nix.net.switch.ch'...\nbuilding '/nix/store/b64rmp9k7qpd7xqdbsfimarn2yrrp022-user-environment.drv'...\ncreated 113 symlinks in user environment\nINFO: Use \"release-manager --switch-to-generation 11\" to switch to the new release\n\nprocess exited with 0 code\n</code></pre> <pre><code>FREERTR#tna-update-release 11\nchild 366116 created on 3\nchild started\nINFO: Checking for release tags of https://bitbucket.software.geant.org/scm/rare/rare-nix.git\nERROR: Release 11 does not exist\n\nprocess exited with 65280 code\n% returned 255\n</code></pre> <p>Tip</p> <p>Once the release has been upgradeed, do not forget to switch the new generation. Here: <code>tna-switch-to-generation 11</code></p>"},{"location":"guides/installation/wedge100bf32/rare-nos-rollback/","title":"RARE NOS upgrade latest release on Wedge 100BF-32(X or QS)","text":"<pre><code>FREERTR#tna-list-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 18:38:17.382194899 +0200\n         2         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 18:42:25.607601811 +0200\n         3 *       1theta  release-1eta-55-g5a08a99   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-08 09:10:41.588185765 +0200\n</code></pre> <pre><code>FREERTR#tna-list-available\nINFO: Checking for release tags of https://bitbucket.software.geant.org/scm/rare/rare-nix.git\n\nVersion  Status\n-------------------------------------------------------------------\n       1 Not installed\n</code></pre> <p><pre><code>FREERTR#tna-install-latest\nchild 362701 created on 3\nchild started\nINFO: Fetching origin/master\nInitialized empty Git repository in /tmp/tmp.RKK4RS54pi/.git/\nremote: Counting objects: 966, done.\nremote: Compressing objects: 100% (906/906), done.\nremote: Total 966 (delta 545), reused 0 (delta 0)        s\nReceiving objects: 100% (966/966), 20.81 MiB | 17.27 MiB/s, done.\nResolving deltas: 100% (545/545), done.\nFrom https://bitbucket.software.geant.org/scm/rare/rare-nix\n * [new branch]      1          -&gt; origin/1\n * [new branch]      1alpha     -&gt; origin/1alpha\n * [new branch]      1beta      -&gt; origin/1beta\n * [new branch]      1delta     -&gt; origin/1delta\n * [new branch]      1epsilon   -&gt; origin/1epsilon\n * [new branch]      1eta       -&gt; origin/1eta\n * [new branch]      1gamma     -&gt; origin/1gamma\n * [new branch]      1theta     -&gt; origin/1theta\n * [new branch]      1zeta      -&gt; origin/1zeta\n * [new branch]      CERN       -&gt; origin/CERN\n * [new branch]      hotfix/jordi-sde_9_5_0_hash_fix -&gt; origin/hotfix/jordi-sde_9_5_0_hash_fix\n * [new branch]      inventec   -&gt; origin/inventec\n * [new branch]      master     -&gt; origin/master\n * [new branch]      nightly    -&gt; origin/nightly\n * [new branch]      release-ng -&gt; origin/release-ng\n * [new tag]         release-1  -&gt; release-1\nHEAD is now at e7e281d Amend previous commit to support model operation on any kernel\ncopying path '/nix/store/biyrng0r6fgvwv4g7rh7p30k70z9zagb-freerouter-jar-22.4.30' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/v5l53fy60402r42yi8lam2s50wd7lhms-hook' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/h128b1jcvqh3g6l78c1s0jwdmm0wwj1a-openjdk-headless-14.0.2-ga' from 'https://cache.nixos.org'...\nbuilding '/nix/store/wsz1cg1p62h810pxi7dh63vvnj4ayvx1-freerouter-java-modules.drv'...\nthese derivations will be built:\n  /nix/store/0ayjlf29hr8b1ll0y2hrfbgyhfswayca-bf_router_GRE-module-wrapper.drv\n...\n...\nbuilding '/nix/store/in3kpaw7kd7ns959fhl0j44dd6xb3nv1-builder.pl.drv'...\ncopying path '/nix/store/2pky7pxssys77jsn016ldpd1dk8s27c9-freerouter.service' from 'http://p4.cache.nix.net.switch.ch'...\nbuilding '/nix/store/2pmpkyaa9m30fqy334lznllbq7d17vny-aux-env.drv'...\ncreated 3 symlinks in user environment\nbuilding '/nix/store/v9y9nz0lhav0m5faiq44ksmr65ivf9yw-user-environment.drv'...\ncreated 113 symlinks in user environment\nINFO: Use \"release-manager --switch-to-generation 10\" to switch to the new release\n\nprocess exited with 0 code\n</code></pre> <pre><code>FREERTR#tna-list-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:40:44.578216971 +0100\n         2         1theta  release-1eta-22-gd8500e6   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:48:02.029248582 +0100\n         3         1theta  release-1eta-27-g5f056c0   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-27 23:57:46.691496126 +0200\n         4         1theta  release-1eta-32-g4fb2381   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:51:53.773985464 +0200\n         5         1theta  release-1eta-33-ge6051d4   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:55:48.397095140 +0200\n         6         1theta  release-1eta-34-gedaf8b2   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:03:28.529174353 +0200\n         7         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:27:50.621246733 +0200\n         8         1theta  release-1eta-57-g176c15e   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-09 11:28:20.630407955 +0200\n         9 *       1       release-1theta-2-g9070f76  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-17 07:40:01.283988320 +0200\n        10         2       release-1-4-ge7e281d       Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 11:08:51.218083155 +0200\n</code></pre></p> <pre><code>FREERTR#tna-switch-to-generation 10\nchild 363282 created on 3\nchild started\nSet RARE profile generation to 10 and restart freerouter? [y/n] y\nprocess exited with 0 code\nConnection closed by foreign host.\n...\nPAR0001#tna-list-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:40:44.578216971 +0100\n         2         1theta  release-1eta-22-gd8500e6   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:48:02.029248582 +0100\n         3         1theta  release-1eta-27-g5f056c0   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-27 23:57:46.691496126 +0200\n         4         1theta  release-1eta-32-g4fb2381   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:51:53.773985464 +0200\n         5         1theta  release-1eta-33-ge6051d4   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:55:48.397095140 +0200\n         6         1theta  release-1eta-34-gedaf8b2   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:03:28.529174353 +0200\n         7         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:27:50.621246733 +0200\n         8         1theta  release-1eta-57-g176c15e   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-09 11:28:20.630407955 +0200\n         9         1       release-1theta-2-g9070f76  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-17 07:40:01.283988320 +0200\n        10 *       2       release-1-4-ge7e281d       Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 11:08:51.218083155 +0200\n</code></pre>"},{"location":"guides/installation/wedge100bf32/rare-nos-switch-profile/","title":"RARE NOS profile","text":"<p>RARE/freeRtr NOS on Wedge 100BF-32X has a concept of <code>profile</code>. It corresponds to a pre-compiled RARE/freeRtr P4 program with specific settings at the dataplane level. Each <code>profile</code> actually is optimized for specific use case. <code>P profilei</code> that corresponds to a core <code>label switch router</code> will favor more entry for IPv4/IPv6 and MPLS table, while SRv6 will include more entry for IPv6 table for example.</p> <p>Info</p> <p>In order to keep the installation guide synthetic, RARE/freeRtr <code>profile</code> will be describe in subsequent section of the documentation. This page focus on how to switch from one <code>profile</code> to another using RARE/freeRtr CLI.</p>"},{"location":"guides/installation/wedge100bf32/rare-nos-switch-profile/#profile-list","title":"Profile list","text":"<p>This list is dependant from the software release.</p> <pre><code>#tna-list-profiles\nCurrent profile: GEANT_TESTBED\nAvailable profiles: BNG, BRAS, CERN_FLOWLAB, CGNAT, CLEANER, CPE, FW, GEANT_TESTBED, GGSN, GRE, IPIP, KIFU_LNS, NFV, NOP_MCHOME, P, PE, RAWIP, RENATER_PEERING_L2, RENATER_PEERING_L3, SRV6, TOR, WLC\n</code></pre>"},{"location":"guides/installation/wedge100bf32/rare-nos-switch-profile/#profile-switch","title":"Profile switch","text":"<p>There is a mechanism that prevent you to install non-exiting <code>profile</code>.</p> <pre><code>FREERTR#tna-set-profile FOO\nInvalid profile FOO, must be one of \"BNG, BRAS, CERN_FLOWLAB, CGNAT, CLEANER, CPE, FW, GEANT_TESTBED, GGSN, GRE, IPIP, KIFU_LNS, NFV, NOP_MCHOME, P, PE, RAWIP, RENATER_PEERING_L2, RENATER_PEERING_L3, SRV6, TOR, WLC\"\n</code></pre> <p>Pick one <code>profile</code> from the list and set the current <code>profile</code> in use</p> <pre><code>FREERTR#tna-set-profile CERN_FLOWLAB\nChanging P4 profile from GEANT_TESTBED to CERN_FLOWLAB, restarting data-plane processes\n</code></pre> <p>Check profile in currently in use</p> <pre><code>FREERTR#tna-list-profiles\nCurrent profile: CERN_FLOWLAB\nAvailable profiles: BNG, BRAS, CERN_FLOWLAB, CGNAT, CLEANER, CPE, FW, GEANT_TESTBED, GGSN, GRE, IPIP, KIFU_LNS, NFV, NOP_MCHOME, P, PE, RAWIP, RENATER_PEERING_L2, RENATER_PEERING_L3, SRV6, TOR, WLC\n</code></pre> <p>Warning</p> <p>If you want to make the <code>profile</code> switch persistent you would need to write the configuration beforehand.</p> <p>This will give you a safety mechanism if you need to fallback or switch to another <code>profile</code>.</p> <p>If you don't <code>write</code> the configuration, the switch will revert to the old <code>profile</code> used.</p> <pre><code>FREERTR#reload warm\nConnection closed by foreign host.\nrare@par0001:~$\ntelnet 127.0.0.1 2323\n Trying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nwelcome\nline ready\nFREERTR#tna-list-profiles\nCurrent profile: GEANT_TESTBED\nAvailable profiles: BNG, BRAS, CERN_FLOWLAB, CGNAT, CLEANER, CPE, FW, GEANT_TESTBED, GGSN, GRE, IPIP, KIFU_LNS, NFV, NOP_MCHOME, P, PE, RAWIP, RENATER_PEERING_L2, RENATER_PEERING_L3, SRV6, TOR, WLC\n</code></pre>"},{"location":"guides/installation/wedge100bf32/rare-nos-switch-profile/#write-the-configuration","title":"Write the configuration","text":"<pre><code>FREERTR#wr\n</code></pre> <p>After a reboot:</p> <pre><code>#tna-list-profiles\nCurrent profile: CERN_FLOWLAB\nAvailable profiles: BNG, BRAS, CERN_FLOWLAB, CGNAT, CLEANER, CPE, FW, GEANT_TESTBED, GGSN, GRE, IPIP, KIFU_LNS, NFV, NOP_MCHOME, P, PE, RAWIP, RENATER_PEERING_L2, RENATER_PEERING_L3, SRV6, TOR, WLC\n</code></pre> <p>The profile now currently in use is persitent even after a reboot.</p>"},{"location":"guides/installation/wedge100bf32/rare-nos-upgrade/","title":"RARE NOS software release update","text":""},{"location":"guides/installation/wedge100bf32/rare-nos-upgrade/#local-installation-check","title":"Local installation check","text":"<pre><code>FREERTR#tna-list-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 18:38:17.382194899 +0200\n         2         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 18:42:25.607601811 +0200\n         3 *       1theta  release-1eta-55-g5a08a99   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-08 09:10:41.588185765 +0200\n</code></pre> <p>Tip</p> <p>In the output above, you can observe that there are 3 distinct installations.</p> <p><code>*</code> indicate the installation currently in use.</p>"},{"location":"guides/installation/wedge100bf32/rare-nos-upgrade/#remote-geant-repository-check","title":"Remote G\u00c9ANT repository check","text":"<p>Check available software release from RARE/freeRtr G\u00c9ANT repository</p> <pre><code>FREERTR#tna-list-available\nINFO: Checking for release tags of https://bitbucket.software.geant.org/scm/rare/rare-nix.git\n\nVersion  Status\n-------------------------------------------------------------------\n       1 Not installed\n</code></pre> <p>Tip</p> <p>From the output above, release version <code>1</code> is available and is <code>not installed</code>.</p>"},{"location":"guides/installation/wedge100bf32/rare-nos-upgrade/#software-release-installation","title":"Software release installation","text":"<p>There are 2 ways to install an available release from RARE/freeRtr G\u00c9ANT remote repository:</p> <ul> <li><code>tna-install-release &lt;release-number&gt;</code></li> </ul> <p>In this case <code>tna-install-release 1</code></p> <ul> <li><code>tna-install-latest</code></li> </ul> <p>This will install the latest release available from RARE-NIX repository <code>&lt;release-number&gt;</code> branch</p> <pre><code>FREERTR#tna-install-latest\nchild 362701 created on 3\nchild started\nINFO: Fetching origin/master\nInitialized empty Git repository in /tmp/tmp.RKK4RS54pi/.git/\nremote: Counting objects: 966, done.\nremote: Compressing objects: 100% (906/906), done.\nremote: Total 966 (delta 545), reused 0 (delta 0)        s\nReceiving objects: 100% (966/966), 20.81 MiB | 17.27 MiB/s, done.\nResolving deltas: 100% (545/545), done.\nFrom https://bitbucket.software.geant.org/scm/rare/rare-nix\n * [new branch]      1          -&gt; origin/1\n * [new branch]      1alpha     -&gt; origin/1alpha\n * [new branch]      1beta      -&gt; origin/1beta\n * [new branch]      1delta     -&gt; origin/1delta\n * [new branch]      1epsilon   -&gt; origin/1epsilon\n * [new branch]      1eta       -&gt; origin/1eta\n * [new branch]      1gamma     -&gt; origin/1gamma\n * [new branch]      1theta     -&gt; origin/1theta\n * [new branch]      1zeta      -&gt; origin/1zeta\n * [new branch]      CERN       -&gt; origin/CERN\n * [new branch]      hotfix/jordi-sde_9_5_0_hash_fix -&gt; origin/hotfix/jordi-sde_9_5_0_hash_fix\n * [new branch]      inventec   -&gt; origin/inventec\n * [new branch]      master     -&gt; origin/master\n * [new branch]      nightly    -&gt; origin/nightly\n * [new branch]      release-ng -&gt; origin/release-ng\n * [new tag]         release-1  -&gt; release-1\nHEAD is now at e7e281d Amend previous commit to support model operation on any kernel\ncopying path '/nix/store/biyrng0r6fgvwv4g7rh7p30k70z9zagb-freerouter-jar-22.4.30' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/v5l53fy60402r42yi8lam2s50wd7lhms-hook' from 'http://p4.cache.nix.net.switch.ch'...\ncopying path '/nix/store/h128b1jcvqh3g6l78c1s0jwdmm0wwj1a-openjdk-headless-14.0.2-ga' from 'https://cache.nixos.org'...\nbuilding '/nix/store/wsz1cg1p62h810pxi7dh63vvnj4ayvx1-freerouter-java-modules.drv'...\nthese derivations will be built:\n  /nix/store/0ayjlf29hr8b1ll0y2hrfbgyhfswayca-bf_router_GRE-module-wrapper.drv\n...\n...\nbuilding '/nix/store/in3kpaw7kd7ns959fhl0j44dd6xb3nv1-builder.pl.drv'...\ncopying path '/nix/store/2pky7pxssys77jsn016ldpd1dk8s27c9-freerouter.service' from 'http://p4.cache.nix.net.switch.ch'...\nbuilding '/nix/store/2pmpkyaa9m30fqy334lznllbq7d17vny-aux-env.drv'...\ncreated 3 symlinks in user environment\nbuilding '/nix/store/v9y9nz0lhav0m5faiq44ksmr65ivf9yw-user-environment.drv'...\ncreated 113 symlinks in user environment\nINFO: Use \"release-manager --switch-to-generation 10\" to switch to the new release\n\nprocess exited with 0 code\n</code></pre>"},{"location":"guides/installation/wedge100bf32/rare-nos-upgrade/#successful-installation-check","title":"Successful installation check","text":"<pre><code>FREERTR#tna-list-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:40:44.578216971 +0100\n         2         1theta  release-1eta-22-gd8500e6   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:48:02.029248582 +0100\n         3         1theta  release-1eta-27-g5f056c0   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-27 23:57:46.691496126 +0200\n         4         1theta  release-1eta-32-g4fb2381   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:51:53.773985464 +0200\n         5         1theta  release-1eta-33-ge6051d4   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:55:48.397095140 +0200\n         6         1theta  release-1eta-34-gedaf8b2   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:03:28.529174353 +0200\n         7         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:27:50.621246733 +0200\n         8         1theta  release-1eta-57-g176c15e   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-09 11:28:20.630407955 +0200\n         9 *       1       release-1theta-2-g9070f76  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-17 07:40:01.283988320 +0200\n        10         2       release-1-4-ge7e281d       Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 11:08:51.218083155 +0200\n</code></pre> <p>Tip</p> <p>You can observe that the installation created a new generation entry <code>10</code>.</p> <p>However, the current software in use is generation <code>9</code></p>"},{"location":"guides/installation/wedge100bf32/rare-nos-upgrade/#switch-to-new-software-release","title":"Switch to new software release","text":"<p>The operation consist in switch the current software in use to the newly installed generation</p> <pre><code>FREERTR#tna-switch-to-generation 10\nchild 363282 created on 3\nchild started\nSet RARE profile generation to 10 and restart freerouter? [y/n] y\nprocess exited with 0 code\nConnection closed by foreign host.\n...\nPAR0001#tna-list-installed\nGeneration Current Release Git Tag                    KernelID       Kernel Release            Platform                   Install date\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n         1         1eta    release-1eta               Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:40:44.578216971 +0100\n         2         1theta  release-1eta-22-gd8500e6   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-25 08:48:02.029248582 +0100\n         3         1theta  release-1eta-27-g5f056c0   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-27 23:57:46.691496126 +0200\n         4         1theta  release-1eta-32-g4fb2381   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:51:53.773985464 +0200\n         5         1theta  release-1eta-33-ge6051d4   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 09:55:48.397095140 +0200\n         6         1theta  release-1eta-34-gedaf8b2   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:03:28.529174353 +0200\n         7         1theta  release-1eta-35-gfdc60bb   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-03-28 13:27:50.621246733 +0200\n         8         1theta  release-1eta-57-g176c15e   Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-09 11:28:20.630407955 +0200\n         9         1       release-1theta-2-g9070f76  Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-04-17 07:40:01.283988320 +0200\n        10 *       2       release-1-4-ge7e281d       Debian11_0     5.10.0-8-amd64            accton_wedge100bf_32x      2022-05-03 11:08:51.218083155 +0200\n</code></pre>"},{"location":"guides/recipes/basics/","title":"Basics","text":""},{"location":"guides/recipes/basics/#configuration-mode","title":"Configuration mode","text":"<p>RARE/freeRtr configuration is available via <code>configuration mode</code>.</p> <p>It is denoted from the CLI by <code>rare(cfg)#</code> prompt.</p> <pre><code>rare#conf t\nrare(cfg)#\n</code></pre>"},{"location":"guides/recipes/basics/#save-configuration","title":"Save configuration","text":"<p>Configuration modifications are made persistent by writing it into the flash disk using the commands below:</p> <p><pre><code>rare(cfg)#exit\nrare#write\n% saving configuration\n% success\nrare#\n</code></pre> or, if you're in configuration mode:</p> <pre><code>rare(cfg)#do write\n% saving configuration\n% success\nrare(cfg)#exit\nrare#\n</code></pre>"},{"location":"guides/recipes/basics/#contextual-help","title":"Contextual help","text":"<ul> <li><code>?</code> from CLI will let you access contextual help.</li> </ul> <pre><code>FREERTR#show ipv4 ospf ?                                                                                                       \n  &lt;num&gt; - process id\n\nFREERTR#show ipv4 ospf 1 ?                                                                                                     \n  database        - list of lsas in area\n  graph           - graph about last spf\n  hostnames       - hostnames from database\n  interface       - list of interfaces\n  lnkinconsistent - inconsistent advertisements of metrics\n  metric          - list of metrics\n  neighbor        - list of neighbors\n  nhinconsistent  - inconsistent advertisements of next hops\n  originate       - list of routes originated locally\n  othertopology   - topology of other node\n  othertree       - tree of other node\n  route           - list of routes in area\n  spf             - information about last spf\n  topology        - topology about last spf\n  tree            - tree about last spf\n</code></pre> <pre><code>FREERTR#conf t                                                                                                                 \nFREERTR(cfg)#access-list MY_ACL_1                                                                                              \nFREERTR(cfg-acl)#exit                                                                                                           \nFREERTR(cfg)#access-list MY_ACL_2                                                                                              \nFREERTR(cfg-acl)#exit                                                                                                          \nFREERTR(cfg)#access-list ?                                                                                                     \n  &lt;name&gt;               - name of access list\n  MY_ACL_1             - name of access list\n  MY_ACL_2             - name of access list\n</code></pre> <ul> <li><code>&lt;tab&gt;</code> will provide you CLI contextual autocompletion </li> </ul> <p>Note</p> <p><code>&lt;tab&gt;</code> provides not only command autocompletion but also contextual object autocompletion among a list of object you might have created previously. In the example above try to type: <code>access-list MY_</code> + <code>&lt;tab&gt;</code> in configutation mode. </p>"},{"location":"guides/recipes/basics/#dataplane-configuration","title":"Dataplane configuration","text":"<p>Important</p> <p>Dataplane parameters defined in RARE/FreeRtr control-plane are defined in <code>server p4lang</code> configuration stanza:</p> <ul> <li>VRF: Enable VRF (L3) at the dataplane level</li> <li>bridge: Enable bridge (L2) at the dataplane level</li> <li>Interface: Enable interface at the dataplane level</li> <li>Logical interfaces: Enable logical interface such as VLAN, Tunnel Hairpin etc. at the dataplane level   </li> </ul> <p>They have to be exported in <code>server p4lang p4</code> such as the example below: <pre><code>server p4lang p4\nexport-bridge 1000\nexport-bridge 1001\nexport-vrf switch_test 1\nexport-vrf switch_test_2 2\nexport-port sdn1 40 10 0 1 0\nexport-port sdn3 276 100 0 1 0\nexport-port sdn5 292 10 0 1 0\nexport-port sdn1.10 dynamic 100 0 1 0\nexport-port sdn1.20 dynamic 100 0 1 0\nexit\n</code></pre> In this example:</p> <ul> <li><code>VRF(s)</code> have assigned the numbers <code>1</code> and <code>2</code> It can be arbitrary integer values.</li> <li> <p><code>Bridges</code> have assigned the numbers <code>1000</code> and <code>1001</code>. It can be arbitrary integer values. </p> </li> <li> <p>Nevertheless, the <code>port-mapping</code> of the <code>interfaces</code> needs to be assigned using the interface configuration document.</p> </li> <li> <p>For the <code>VLAN sub-interfaces</code>, the mapping is configured using the keyword <code>dynamic</code> </p> </li> </ul> <p>Warning</p> <p>this section is by no means complete. RARE/freeRtr exposes an extensive list of CLI features. </p> <p>Please refers to these blogs articles should you are \"greedy\" of more features:</p> <ul> <li>\"conf t\"</li> <li>\"show/view/watch/display/differ\"</li> <li>\"Let's make you feel at home !\"</li> <li>\"\"Saving private OpenWRT\", thanks freeRouter's TFTP server !\"</li> </ul>"},{"location":"guides/recipes/vrf/","title":"Bridge and Virtual Routing and Fording (VRF)","text":"<p>In RARE/freeRtr you have 2 major constructs:</p> <ul> <li>bridge for L2</li> <li>VRF for L3</li> </ul>"},{"location":"guides/recipes/vrf/#bridge-wikipedia","title":"Bridge  (Wikipedia)","text":"<p>A network bridge is a computer networking device that creates a single, aggregate network from multiple communication networks or network segments. This function is called network bridging.</p> <p>In RARE/freeRtr, <code>bridge</code> in RARE/FreeRtr can be configured with the following command:</p> <pre><code>FREERTR(cfg)#bridge ?                                                                                                          \n  &lt;num&gt; - number of bridge group\n\nFREERTR(cfg)#bridge 1 ?                                                                                                        \n  &lt;cr&gt;\n</code></pre> <p>Warning</p> <p>Do not forget to export <code>bridge</code>(s) into <code>server p4lang</code> so that the dataplane will take it into account into its hardware forwarding operation</p>"},{"location":"guides/recipes/vrf/#virtual-routing-forwarding-wikipedia","title":"Virtual routing forwarding  (Wikipedia)","text":"<p><code>Virtual Routing Forwarding (VRF)</code> is a technology included in <code>IP (Internet Protocol)</code> network routers that allows users to configure multiple routing table instances to simultaneously co-exist within the same router. <code>VRFs</code> are used for network isolation/virtualization at Layer 3 of the OSI model, the overlapping <code>IP addresses</code> can be used without conflicting because the multiple routing instances are independent and can select different outgoing interfaces. A <code>VRF</code> requires a <code>forwarding table</code> that designates the <code>next-hop</code> for each data packet, a list of devices that may be called upon to forward the packet and a set of rules and routing protocols that govern how the packets will be forwarded. These tables prevent traffic from being forwarded outside a specific <code>VRF path</code> and also keep out traffic that should remain outside the <code>VRF path</code>. Thus, the packets will be forwarded only between interfaces that <code>belongs to the same VRF</code>. </p> <p>In RARE/freeRtr, <code>vrf</code> in RARE/FreeRtr can be configured with the following command:</p> <pre><code>AMS0001(cfg)#vrf definition MY_?                                                                                               \ntype &lt;name&gt; to name of vrf\n\nAMS0001(cfg)#vrf definition MY_VRF ?                                                                                           \n  &lt;cr&gt;\n\nAMS0001(cfg)#exit\n</code></pre> <p>Warning</p> <p>Do not forget to export <code>vrf</code>(s) into <code>server p4lang</code> so that the dataplane will take it into account into its hardware forwarding operation</p>"}]}